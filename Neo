<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width,initial-scale=1" name="viewport"/>
<title>Offline XPath Locator &amp; POM + API Studio — Fixed</title>
<style>
  :root{
    --bg:#0f1217; --panel:#151a21; --panel2:#171e27; --chip:#202734;
    --txt:#e9eef5; --dim:#9db0c5; --brd:#273243;
    --accent:#7c5cff; --ok:#19c37d; --warn:#ffbf47; --bad:#ff4d4f;
    --ed-bg:#fbfcfe; --ed-brd:#dfe6ee; --ed-txt:#0f172a;
  }
  *{box-sizing:border-box}
  html,body{height:100%}
  body{margin:0;background:var(--bg);color:var(--txt);font-family:Inter,ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto}
  .app{display:grid;grid-template-columns:280px 1fr;height:100%}
  /* Sidebar */
  .side{background:linear-gradient(180deg,#0f1217 0,#0f1217 60%,#0b0e13 100%);border-right:1px solid var(--brd);padding:18px 16px;overflow:auto}
  .brand{display:flex;align-items:center;gap:10px;font-weight:800;margin-bottom:14px}
  .beacon{width:10px;height:10px;border-radius:50%;background:linear-gradient(180deg,var(--accent),#563bff);box-shadow:0 0 10px var(--accent)}
  .section{margin:16px 0 8px;color:var(--dim);font-size:12px;letter-spacing:.12em;text-transform:uppercase}
  .btn{width:100%;text-align:left;cursor:pointer;background:var(--panel);border:1px solid var(--brd);border-radius:10px;padding:10px 12px;color:var(--txt);font-weight:600;margin-bottom:8px;transition:.15s}
  .btn:hover{background:var(--panel2);transform:translateY(-1px)}
  .btn.primary{background:linear-gradient(180deg,var(--accent),#6047ff);border-color:#5b49f2}
  .btn.danger{background:linear-gradient(180deg,#ff4d4f,#e13b3e);border-color:#e13b3e}
  .pill{display:flex;gap:8px;align-items:center;background:var(--chip);border:1px solid var(--brd);border-radius:999px;padding:8px 10px;width:max-content;color:var(--dim);font-size:12px}
  .switch{display:flex;gap:8px}
  .switch .sw{padding:8px 12px;border:1px solid var(--brd);border-radius:10px;background:var(--panel);cursor:pointer}
  .sw.active{outline:2px solid rgba(124,92,255,.35)}
  /* Main */
  .main{display:grid;grid-template-rows:auto 1fr auto}
  .toolbar{display:flex;gap:10px;align-items:center;padding:12px 16px;border-bottom:1px solid var(--brd);background:var(--panel);position:sticky;top:0;z-index:5}
  .toolbar .title{font-weight:800}
  .hint{color:var(--dim);font-size:12px;margin-left:auto}
  .mode-chips{display:flex;gap:8px}
  .mode-chip{padding:6px 10px;border-radius:8px;background:#0f1419;border:1px solid var(--brd);cursor:pointer;color:var(--dim);font-weight:700}
  .mode-chip.active{background:linear-gradient(90deg,var(--accent),#5a48f0);color:#fff;box-shadow:0 6px 18px rgba(90,72,240,.12)}
  .workspace{display:grid;grid-template-columns:48% 52%;gap:14px;padding:14px;overflow:auto}
  .card{background:var(--panel);border:1px solid var(--brd);border-radius:14px;overflow:hidden;display:flex;flex-direction:column;box-shadow:0 10px 30px rgba(0,0,0,.35)}
  .card .head{background:var(--panel2);padding:12px 14px;border-bottom:1px solid var(--brd);display:flex;align-items:center;gap:10px;font-weight:700}
  .card .body{padding:12px;display:flex;flex-direction:column;gap:10px;min-height:140px}
  .row{display:flex;gap:10px;flex-wrap:wrap;align-items:center}
  select,input[type="text"]{background:var(--panel2);border:1px solid var(--brd);border-radius:10px;color:var(--txt);padding:8px 10px}
  textarea.ed{background:var(--ed-bg);border:1px solid var(--ed-brd);border-radius:12px;color:var(--ed-txt);padding:10px;min-height:130px;font-family:ui-monospace,Menlo,Consolas,monospace}
  iframe#preview{width:100%;height:360px;background:#fff;border:none;border-radius:8px}
  .drop{display:flex;justify-content:center;align-items:center;height:56px;border:2px dashed #3a475a;border-radius:12px;color:var(--dim)}
  .chip-tabs{display:flex;gap:8px;flex-wrap:wrap;background:var(--panel);border-bottom:1px solid var(--brd);padding:8px 12px}
  .chip{padding:8px 12px;border:1px solid var(--brd);border-radius:999px;background:#1a2230;color:#b8c6d9;font-size:12px;cursor:pointer}
  .chip.active{color:#fff;border-color:var(--accent);box-shadow:0 0 0 2px rgba(124,92,255,.25) inset}
  .list{display:flex;flex-direction:column;gap:6px;max-height:280px;overflow:auto;background:var(--ed-bg);border:1px solid var(--ed-brd);border-radius:12px;padding:8px}
  .loc-row{background:#fff;border:1px solid #e6ecf5;border-radius:8px;padding:8px 10px;color:#0f172a;cursor:pointer;display:flex;align-items:center;justify-content:space-between;gap:8px}
  .loc-row:hover{background:#f5f8ff}
  .badge{font-size:11px;background:#eef2ff;border:1px solid #d8e1ff;border-radius:999px;padding:2px 8px;margin-right:8px;color:#1f2b46}
  .footer{display:flex;gap:10px;align-items:center;padding:12px 16px;border-top:1px solid var(--brd);background:var(--panel)}
  .toast{position:fixed;bottom:16px;right:16px;background:#131a24;border:1px solid #2a3648;color:#cfe3ff;padding:10px 12px;border-radius:10px;opacity:0;transform:translateY(8px);transition:.15s}
  .toast.show{opacity:1;transform:translateY(0)}
  .mono{font-family:ui-monospace,Menlo,Consolas,monospace}
  .small{font-size:12px;color:var(--dim)}
  .hidden{display:none}
  @media (max-width:980px){.workspace{grid-template-columns:1fr}} 
</style>

<!-- third-party lib -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
</head>
<body>
<div class="app">
<!-- Sidebar -->
<aside class="side">
<div class="brand"><span class="beacon"></span> Offline XPath Studio</div>
<div class="section">Workspace</div>
<button class="btn" id="btnPaste">Paste HTML</button>
<button class="btn" id="btnOpenFile">Open .html file</button>
<button class="btn" id="btnExport">Export (locators + checks)</button>
<div class="section">POM &amp; Steps</div>
<div class="switch">
<div class="sw active" data-fw="selenium">Selenium</div>
<div class="sw" data-fw="playwright">Playwright</div>
</div>
<div style="height:8px"></div>
<div class="switch">
<div class="sw active" data-runner="testng">Maven + TestNG</div>
<div class="sw" data-runner="cucumber">Maven + Cucumber</div>
</div>
<div style="height:8px"></div>
<div class="switch">
<div class="sw active" data-lang="java">Java</div>
<div class="sw" data-lang="javascript">JavaScript</div>
<div class="sw" data-lang="python">Python</div>
<div class="sw" data-lang="typescript">TypeScript</div>
</div>
<button class="btn primary" id="btnGenPOM" style="margin-top:10px">Generate POM + Steps</button>
<button class="btn" id="btnDownloadPOM">Download POM file</button>
<button class="btn" id="btnDownloadSteps">Download Steps file</button>
<button class="btn" id="btnZipAll">Download ZIP (All)</button>
</aside>
<!-- Main -->
<main class="main">
<div class="toolbar">
<div class="title">1) Paste/Open HTML → 2) Pick a locator panel → 3) Copy rows → 4) Generate POM + Steps</div>
<div class="mode-chips">
<div class="mode-chip active" id="modePOM">POM Studio</div>
<div class="mode-chip" id="modeAPI">API Studio</div>
</div>
<div class="hint">Row click = copy • Priority: name → label → placeholder</div>
</div>
<div class="workspace">
<!-- Left panel for POM Studio -->
<section class="card" id="pomLeftCard">
<div class="head">Paste HTML</div>
<div class="body">
<textarea class="ed" id="pasteBox" placeholder="Paste full page HTML here..."></textarea>
<div class="row">
<button class="btn primary" id="btnRender" style="width:auto">Render Preview</button>
<button class="btn danger" id="btnClear" style="width:auto">Clear</button>
</div>
<div class="head" style="margin:6px -12px 0;border-radius:10px">Preview</div>
<div class="drop" id="dropZone">Drop .html here</div>
<iframe id="preview" sandbox="allow-same-origin allow-forms allow-scripts"></iframe>
</div>
</section>
<!-- Left panel for API Studio -->
<section class="card hidden" id="apiLeftCard">
<div class="head">Paste cURL</div>
<div class="body">
<textarea class="ed mono" id="curlBox" placeholder="Paste cURL here (from Postman/Insomnia)..."></textarea>
<div class="row" style="align-items:center; gap:12px">
<label class="small">Framework</label>
<select id="apiFramework">
<option value="restassured">RestAssured (Java)</option>
<option value="karate">Karate DSL</option>
</select>
<button class="btn primary" id="btnGenAPI" style="width:auto">Generate API Code</button>
</div>
</div>
</section>
<!-- Right -->
<section class="card" id="rightCard">
<div class="head">Locators &amp; Code</div>
<div class="body" id="rightBody">
<div id="pomPanel">
<div class="chip-tabs">
<div class="chip active" data-paneltab="basic">Basic</div>
<div class="chip" data-paneltab="wildcards">Wildcards</div>
<div class="chip" data-paneltab="axes">Axes</div>
<div class="chip" data-paneltab="functions">Functions</div>
<div class="chip" data-paneltab="sf">Salesforce</div>
<div class="chip" data-paneltab="pega">Pega</div>
</div>
<div class="list" id="locList"></div>
<div class="head" style="margin:8px -12px 0;border-radius:10px">Output</div>
<textarea class="ed mono" id="output" placeholder="POM / Steps / Export text will appear here…"></textarea>
</div>
<div class="hidden" id="apiPanel">
<div class="row" style="align-items:flex-end">
<div style="flex:1">
<label class="small">Method</label>
<select id="apiMethod"><option>GET</option><option>POST</option><option>PUT</option><option>DELETE</option></select>
</div>
<div style="flex:3">
<label class="small">Endpoint</label>
<input id="apiUrl" placeholder="https://api.example.com/..." type="text"/>
</div>
</div>
<div style="display:flex;gap:10px">
<div style="flex:1">
<label class="small">Headers (JSON)</label>
<textarea class="ed" id="apiHeaders" style="min-height:80px">{ "Content-Type":"application/json" }</textarea>
</div>
<div style="flex:1">
<label class="small">Body (JSON)</label>
<textarea class="ed" id="apiBody" style="min-height:80px">{}</textarea>
</div>
</div>
<div class="row">
<button class="btn primary" id="btnGenerateApi">Generate Code</button>
<button class="btn" id="btnPasteCurl">Paste cURL → Parse</button>
<button class="btn" id="btnCopyApiCode">Copy Code</button>
</div>
<div class="head" style="margin:8px -12px 0;border-radius:10px">Generated API Code</div>
<textarea class="ed mono" id="apiCode" placeholder="RestAssured / Playwright API code will appear here..."></textarea>
<div class="head" style="margin:8px -12px 0;border-radius:10px">Response / Paste here</div>
<textarea class="ed mono" id="apiResponse" placeholder="Paste response JSON here to visualize or to include in tests..."></textarea>
</div>
</div>
</section>
</div>
<div class="footer">
<div class="pill">Copy any locator by clicking its row</div>
<div class="pill">Export includes isVisible / isClickable / isEnabled / isDisabled with waits</div>
</div>
</main>
</div>

<input accept=".html,.htm,.xhtml,.txt" hidden="" id="hiddenFile" type="file"/>
<div class="toast" id="toast">Copied ✔</div>

<script>

  /* ===================================================
  1. Namespace & Global State
  Paste this first.
=================================================== */
<script>
/* --- Namespacing / compatibility patch: merge globals into NS --- */
window.AdhyPatch = window.AdhyPatch || {};
const NS = window.AdhyPatch;

// --- helpers (DOM query)
NS.$ = NS.$ || (s => document.querySelector(s));
NS.$$ = NS.$$ || (s => Array.from(document.querySelectorAll(s)));

// --- UI element references (fill these once DOM exists)
// If your script runs before DOM, these will be null; keep that in mind.
NS.preview = NS.preview || NS.$('#preview');
NS.locList = NS.locList || NS.$('#locList');
NS.output = NS.output || NS.$('#output');
NS.pasteBox = NS.pasteBox || NS.$('#pasteBox');
NS.toast = NS.toast || NS.$('#toast');
NS.hiddenFile = NS.hiddenFile || NS.$('#hiddenFile');

// --- persistent state (keeps existing values if already set)
NS.CURRENT_DOC = (typeof NS.CURRENT_DOC !== 'undefined') ? NS.CURRENT_DOC : null;
NS.CURRENT_HTML = (typeof NS.CURRENT_HTML !== 'undefined') ? NS.CURRENT_HTML : '';
NS.CURRENT_LOCATORS = (typeof NS.CURRENT_LOCATORS !== 'undefined') ? NS.CURRENT_LOCATORS : [];
NS.CURRENT_IFRAME_PATH = (typeof NS.CURRENT_IFRAME_PATH !== 'undefined') ? NS.CURRENT_IFRAME_PATH : null;
NS.CURRENT_FRAME_CONTEXT = (typeof NS.CURRENT_FRAME_CONTEXT !== 'undefined') ? NS.CURRENT_FRAME_CONTEXT : null;
NS.MODE = (typeof NS.MODE !== 'undefined') ? NS.MODE : 'generic'; // 'generic' | 'salesforce' | 'pega'
NS.POM_CACHE = (typeof NS.POM_CACHE !== 'undefined') ? NS.POM_CACHE : { pom: '', steps: '' };
NS.LOGS = (typeof NS.LOGS !== 'undefined') ? NS.LOGS : [];
NS.CUSTOM_LOCATORS = (typeof NS.CUSTOM_LOCATORS !== 'undefined') ? NS.CUSTOM_LOCATORS : [];

// --- Also expose the common names as globals for backward compatibility
// (these are references; updating NS.* updates these values)
const $ = NS.$;
const $$ = NS.$$;

// UI element globals so old code doesn't break
const preview = NS.preview;
const locList = NS.locList;
const output = NS.output;
const pasteBox = NS.pasteBox;
const toast = NS.toast;
const hiddenFile = NS.hiddenFile;

// Backward-compatible simple copies of state (references)
let CURRENT_DOC = NS.CURRENT_DOC;
let CURRENT_HTML = NS.CURRENT_HTML;
let CURRENT_LOCATORS = NS.CURRENT_LOCATORS;
let CURRENT_IFRAME_PATH = NS.CURRENT_IFRAME_PATH;
let CURRENT_FRAME_CONTEXT = NS.CURRENT_FRAME_CONTEXT;
let MODE = NS.MODE;
let POM_CACHE = NS.POM_CACHE;

// Also keep a small sync helper to persist changes back into NS
function syncToNS(){
  NS.CURRENT_DOC = CURRENT_DOC;
  NS.CURRENT_HTML = CURRENT_HTML;
  NS.CURRENT_LOCATORS = CURRENT_LOCATORS;
  NS.CURRENT_IFRAME_PATH = CURRENT_IFRAME_PATH;
  NS.CURRENT_FRAME_CONTEXT = CURRENT_FRAME_CONTEXT;
  NS.MODE = MODE;
  NS.POM_CACHE = POM_CACHE;
}

// And a helper to refresh local copies from NS (if something else changed NS)
function syncFromNS(){
  CURRENT_DOC = NS.CURRENT_DOC;
  CURRENT_HTML = NS.CURRENT_HTML;
  CURRENT_LOCATORS = NS.CURRENT_LOCATORS;
  CURRENT_IFRAME_PATH = NS.CURRENT_IFRAME_PATH;
  CURRENT_FRAME_CONTEXT = NS.CURRENT_FRAME_CONTEXT;
  MODE = NS.MODE;
  POM_CACHE = NS.POM_CACHE;
}

/* Optional: automatically sync before unload (not required)
window.addEventListener('beforeunload', () => { syncToNS(); });
*/

// If you prefer all code to use NS directly, you can replace usage of the top-level
// variables with NS.CURRENT_HTML etc. This compatibility layer ensures your current
// codebase keeps running while you refactor incrementally.
</script>
  
  /* ===================================================
  2. Utilities
  Helpers used across blocks.
=================================================== */
const $ = s => document.querySelector(s);
const $$ = s => Array.from(document.querySelectorAll(s));

function escapeHtml(s){ return (s||'').toString().replace(/&/g,'&amp;').replace(/</g,'&lt;'); }
function escapeForXPath(s){ return (s||'').toString().replace(/"/g,'\\"'); }
function sanitizeVar(s){ if(!s) return 'elem'; return s.replace(/[^a-zA-Z0-9_$]/g,'_').toLowerCase().slice(0,40); }
function prettyLabel(label){ return !label ? '' : (label.length > 40 ? label.slice(0,37)+'...' : label); }
function safeQuery(doc, sel){ try { return doc.querySelector(sel); } catch(e){ return null; } }

let toastTimer = null;
function showToast(msg, type='info'){
  const toast = $('#toast');
  if(toast){
    toast.textContent = msg;
    toast.style.background = (type==='error')? '#f87171' : (type==='success')? '#4ade80' : '#0e1720';
    toast.classList.add('show');
    clearTimeout(toastTimer);
    toastTimer = setTimeout(()=>toast.classList.remove('show'), 1600);
  } else console.log("TOAST:", msg);
}

async function safeCopy(text){
  try { await navigator.clipboard.writeText(text); showToast('Copied!', 'success'); return true; }
  catch(e){ console.warn("clipboard failed", e); showToast('Copy failed', 'error'); return false; }
}

// XPath literal helper
function xpathLiteral(s){
  s = String(s || '');
  if (s.indexOf('"') === -1) return `"${s}"`;
  if (s.indexOf("'") === -1) return `'${s}'`;
  const parts = s.split('"'), out=[];
  for (let i=0;i<parts.length;i++){
    if(parts[i] !== '') out.push(`"${parts[i].replace(/\\/g,'\\\\')}"`);
    if (i < parts.length - 1) out.push(`'"'`);
  }
  return `concat(${out.join(',')})`;
}

// CSS selector fallback
function cssSelectorFor(el){
  if(!el || !el.tagName) return '';
  if (el.id) try { return `#${CSS.escape(el.id)}`; } catch(e){ return '#'+el.id; }
  let sel = el.tagName.toLowerCase();
  if (el.classList && el.classList.length) sel += '.' + Array.from(el.classList).map(c=>c.trim().replace(/\s+/g,'')).join('.');
  if (el.name) sel += `[name="${el.getAttribute('name')}"]`;
  return sel;
}
  
  /* ===================================================
  3. Preview accessors & listeners
  One canonical way to get the preview document and manage listeners.
=================================================== */
const PREVIEW_SEL_CANDIDATES = ['#preview', '#previewFrame', '#render-preview', '.preview-frame', 'iframe#preview'];

function getPreviewElement(){
  for(const s of PREVIEW_SEL_CANDIDATES){
    const el = document.querySelector(s);
    if(el) return el;
  }
  return document.querySelector('iframe') || null;
}

function getPreviewDocument(){
  const el = getPreviewElement();
  if(!el) return window._PARSER_DOC || document;
  if (el.tagName && el.tagName.toLowerCase() === 'iframe'){
    try { if (el.contentDocument) return el.contentDocument; } catch(e){}
    if (el.srcdoc) try { return (new DOMParser()).parseFromString(el.srcdoc, 'text/html'); } catch(e){}
  }
  // if container has child iframe
  if (el.querySelector){
    const ifr = el.querySelector('iframe');
    try { if(ifr && ifr.contentDocument) return ifr.contentDocument; } catch(e){}
  }
  return window._PARSER_DOC || document;
}
window.getPreviewDocument = getPreviewDocument;

// manage iframe-injected listeners (to avoid duplicates)
window._AdhyanPreviewListeners = window._AdhyanPreviewListeners || { docListeners: [] };

function attachPreviewHandler(doc, type, handler){
  if(!doc) return;
  doc.addEventListener(type, handler, true);
  window._AdhyanPreviewListeners.docListeners.push({doc, type, handler});
}
function detachAllPreviewHandlers(){
  const arr = window._AdhyanPreviewListeners.docListeners || [];
  arr.forEach(it=>{ try{ it.doc.removeEventListener(it.type, it.handler, true); }catch(e){} });
  window._AdhyanPreviewListeners.docListeners = [];
}
  
  /* ===================================================
  4. Iframe & Shadow DOM Traversal
  Evaluate XPath across frames/shadow roots for preview/highlight.
=================================================== */
function findInIframes(doc, xpath, path=[], depth=0){
  if(depth > 10) return [];
  let results = [];
  try {
    if(doc && doc.evaluate){
      const snap = doc.evaluate(xpath, doc, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
      for(let i=0;i<snap.snapshotLength;i++){
        results.push({ node: snap.snapshotItem(i), framePath: [...path] });
      }
    }
  } catch(e){}

  try {
    const iframes = doc.querySelectorAll ? doc.querySelectorAll('iframe') : [];
    iframes.forEach((f, idx) => {
      try {
        if(f.contentDocument){
          results = results.concat(findInIframes(f.contentDocument, xpath, [...path, idx], depth+1));
        }
      } catch(e){}
    });
  } catch(e){}

  try {
    const allEls = doc.querySelectorAll ? doc.querySelectorAll('*') : [];
    allEls.forEach(el=>{
      if(el.shadowRoot){
        results = results.concat(findInIframes(el.shadowRoot, xpath, [...path, 'shadow'], depth+1));
      }
    });
  } catch(e){}

  return results;
}

function framePathToString(path){
  if(!Array.isArray(path)) return '';
  return path.map(p => (p==='shadow' ? '#shadow-root' : `iframe[${p}]`)).join(" > ");
}

function highlightElementInIframe(node, opts){
  opts = opts || {};
  try {
    node.style.outline = opts.color || '3px solid magenta';
    node.scrollIntoView({behavior:'smooth', block:'center'});
    if(opts.flash) setTimeout(()=>{ try{ node.style.outline = ''; }catch(e){} }, opts.duration || 1600);
  } catch(e){ dbg('highlight fail', e); }
}
  
  /* ===================================================
  5. Frame Chain Utilities
  Build serializable frame descriptors and replay them.
=================================================== */
function describeFrameElement(iframeEl){
  if(!iframeEl || iframeEl.nodeType !== 1) return null;
  const tag = iframeEl.tagName.toLowerCase();
  const id = iframeEl.id || null;
  const name = iframeEl.getAttribute && iframeEl.getAttribute('name') ? iframeEl.getAttribute('name') : null;
  const src = iframeEl.getAttribute && iframeEl.getAttribute('src') ? iframeEl.getAttribute('src') : null;
  let idx = 1; let sib = iframeEl;
  while((sib = sib.previousElementSibling) != null){
    if(sib.tagName === iframeEl.tagName) idx++;
  }
  return { tag, id, name, src, index: idx };
}

function getFrameChainForElement(el){
  if(!el) return [];
  let win = el.ownerDocument && el.ownerDocument.defaultView ? el.ownerDocument.defaultView : window;
  const chain = [];
  while(win && win !== window.top){
    try {
      const frameEl = win.frameElement;
      if(!frameEl) break;
      const desc = describeFrameElement(frameEl);
      chain.push({ descriptor: desc, frameElement: frameEl });
      win = win.parent; if(!win) break;
    } catch(e){
      chain.push({ descriptor: { tag:'iframe', id:null, name:null, src:null, index:null, crossOrigin:true }, frameElement: null });
      break;
    }
  }
  return chain.reverse(); // TOP -> INNER
}

function buildFramePathForElement(el){
  const chain = getFrameChainForElement(el);
  const path = chain.map(item=>{
    const d = item.descriptor;
    if(d.id) return `iframe[id="${d.id}"]`;
    if(d.name) return `iframe[name="${d.name}"]`;
    if(d.src) return `iframe[src="${d.src}"]`;
    if(d.index) return `iframe[index=${d.index}]`;
    return `iframe[?]`;
  }).join(' > ');
  return { chain, path };
}

// Replay: given array of descriptors (TOP->INNER) and an xpath relative to inner doc, attempt to locate element
function findElementByFrameChainAndXPath(frameChainDescriptors, xpath){
  try {
    let currentWindow = window.top;
    for(let i=0;i<frameChainDescriptors.length;i++){
      const desc = frameChainDescriptors[i];
      let candidateFrames = Array.from(currentWindow.document.querySelectorAll(desc.tag || 'iframe'));
      if(desc.id) candidateFrames = candidateFrames.filter(f => f.id === desc.id);
      if(desc.name) candidateFrames = candidateFrames.filter(f => (f.getAttribute && f.getAttribute('name')) === desc.name);
      if(desc.src) candidateFrames = candidateFrames.filter(f => (f.getAttribute && f.getAttribute('src')) === desc.src);
      if((desc.index || desc.index === 1) && candidateFrames.length > 0){
        candidateFrames = candidateFrames.filter((f) => {
          let pos=1; let sib=f;
          while((sib = sib.previousElementSibling) != null){ if(sib.tagName === f.tagName) pos++; }
          return pos === desc.index;
        });
      }
      if(candidateFrames.length === 0) return null;
      const frameEl = candidateFrames[0];
      try {
        const childWin = frameEl.contentWindow; if(!childWin) return null;
        currentWindow = childWin;
      } catch(e){ return null; }
    }
    const doc = currentWindow.document;
    const res = doc.evaluate(xpath, doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
    const el = res && res.singleNodeValue ? res.singleNodeValue : null;
    return el ? { el, win: currentWindow } : null;
  } catch(e){ return null; }
}

function createFrameScopedLocator(el, xpathInDoc){
  const info = buildFramePathForElement(el);
  return { framePath: info.path, frameDescriptors: info.chain.map(i=>i.descriptor), xpath: xpathInDoc };
}
  /* ===================================================
  6. Locator Generators
  Build candidate XPaths/CSS & attach framePath info
=================================================== */
function pickBestLabel(el){
  try {
    const aria = el.getAttribute && el.getAttribute('aria-label');
    if (aria) return aria.trim();
    const arid = el.getAttribute && el.getAttribute('aria-labelledby');
    if (arid) {
      const n = el.ownerDocument.getElementById(arid.split(/\s+/)[0]);
      if (n) return n.textContent.trim();
    }
    const ph = el.getAttribute && el.getAttribute('placeholder'); if (ph) return ph;
    const alt = el.getAttribute && el.getAttribute('alt'); if (alt) return alt;
    const title = el.getAttribute && el.getAttribute('title'); if (title) return title;
    if (el.name) return el.name;
    if (el.id) {
      const lab = el.ownerDocument.querySelector && el.ownerDocument.querySelector(`label[for="${el.id}"]`);
      if (lab) return lab.textContent.trim();
    }
    const txt = (el.textContent || '').trim();
    if (txt) return prettyLabel(txt);
    return el.id || '';
  } catch(e){ return ''; }
}

function buildHierarchyXPath(el){
  const parts=[]; let node=el;
  while(node && node.nodeType===1 && node.tagName.toLowerCase()!=='html'){
    const name=node.tagName.toLowerCase();
    let idx=1; let sib=node.previousElementSibling;
    while(sib){ if(sib.tagName.toLowerCase()===node.tagName.toLowerCase()) idx++; sib=sib.previousElementSibling; }
    parts.unshift(`${name}${idx>1?`[${idx}]`:''}`);
    node=node.parentElement;
    if(parts.length>8) break;
  }
  return '//' + parts.join('/');
}

function buildCss(el){
  if(el.id) return `#${el.id}`;
  const cls = (el.className||'').toString().trim().split(/\s+/).filter(Boolean);
  if(cls.length) return `${el.tagName.toLowerCase()}.${cls.slice(0,3).join('.')}`;
  if(el.name) return `${el.tagName.toLowerCase()}[name="${el.name}"]`;
  return el.tagName.toLowerCase();
}

function checkUniqueness(doc,xpath){
  try { const r = doc.evaluate(xpath, doc, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null); return r.snapshotLength === 1; } catch(e){ return false; }
}

function buildXPathStrategies(el, doc){
  const tag = el.tagName.toLowerCase();
  const strategies = [];
  if(el.id) strategies.push({ xpath:`//*[@id="${el.id}"]`, score:1.0, why:'id' });
  if(el.name) strategies.push({ xpath:`//*[@name="${el.name}"]`, score:0.95, why:'name' });
  const aria = el.getAttribute && el.getAttribute('aria-label'); if(aria) strategies.push({ xpath:`//*[@aria-label="${aria}"]`, score:0.9, why:'aria-label' });
  const cls = (el.className||'').toString().trim().split(/\s+/).filter(Boolean);
  if(cls.length){ strategies.push({ xpath:`//${tag}[contains(concat(' ',normalize-space(@class),' '),' ${cls[0]} ')]`, score:0.82, why:'class-contains'}); }
  ['placeholder','title','alt','data-testid','data-qa','data-test-id','data-ctl'].forEach(attr=>{
    const v = el.getAttribute && el.getAttribute(attr);
    if(v) strategies.push({ xpath:`//${tag}[@${attr}="${v}"]`, score:0.95, why:attr });
  });
  if(['a','button','label'].includes(tag)){
    const t = (el.textContent||'').trim().slice(0,80);
    if(t){ strategies.push({ xpath:`//${tag}[normalize-space(.)="${t}"]`, score:0.9, why:'text-exact' }); strategies.push({ xpath:`//${tag}[contains(normalize-space(.),"${escapeForXPath(t)}")]`, score:0.65, why:'text-contains' }); }
  }
  const id = el.id;
  if(id){
    const lab = doc.querySelector && doc.querySelector(`label[for="${id}"]`);
    if(lab){ strategies.push({ xpath:`//label[@for="${id}"]`, score:0.9, why:'label-for' }); strategies.push({ xpath:`//label[normalize-space(.)="${lab.textContent.trim()}"]/following::${tag}[1]`, score:0.75, why:'label-following' }); }
  } else {
    const prev = el.previousElementSibling;
    if(prev && prev.tagName.toLowerCase()==='label'){ const t=prev.textContent.trim(); strategies.push({ xpath:`//label[normalize-space(.)="${t}"]/following::${tag}[1]`, score:0.75, why:'label-prev-following' }); }
  }
  strategies.push({ xpath: buildHierarchyXPath(el), score:0.35, why:'hierarchy' });
  const map = new Map(); strategies.forEach(s=>{ if(!map.has(s.xpath)) map.set(s.xpath,s); });
  return Array.from(map.values()).sort((a,b)=>b.score-a.score);
}

function generateLocatorsFromDoc(doc){
  const elems = Array.from(doc.querySelectorAll('a,button,input,select,textarea,label,img'));
  const seen = new Map(), out=[];
  elems.forEach((el,idx)=>{
    try{
      const tag = el.tagName.toLowerCase();
      const label = pickBestLabel(el) || `${tag}_${idx+1}`;
      const xpath = buildHierarchyXPath(el);
      const css = buildCss(el);
      const frameInfo = buildFramePathForElement(el);
      const key = `${tag}|${label}`;
      if(!seen.has(key)){
        out.push({ type: tag, label, xpath, css, confidence:0.4, why:'basic', framePath: frameInfo.path, frameDescriptors: frameInfo.chain.map(c=>c.descriptor) });
        seen.set(key,true);
      }
    }catch(e){}
  });
  return out;
}

function generateAdvancedLocatorsFromDoc(doc){
  const elems = Array.from(doc.querySelectorAll('a,button,input,select,textarea,label,img'));
  const out=[];
  elems.forEach((el,idx)=>{
    try{
      const tag = el.tagName.toLowerCase();
      const label = pickBestLabel(el) || `${tag}_${idx+1}`;
      const strategies = buildXPathStrategies(el, doc);
      const best = strategies[0] || { xpath: buildHierarchyXPath(el), score:0.3, why:'hierarchy' };
      const css = buildCss(el);
      if(!checkUniqueness(doc,best.xpath)) best.score -= 0.2;
      const frameInfo = buildFramePathForElement(el);
      // boost score for framework-specific attributes
      if(NS.MODE==='salesforce' && (el.hasAttribute && (el.hasAttribute('data-qa-locator') || el.hasAttribute('data-aura-class')))){ best.score = Math.max(best.score, 0.98); }
      if(NS.MODE==='pega' && (el.hasAttribute && (el.hasAttribute('data-test-id') || el.hasAttribute('data-ctl')))){ best.score = Math.max(best.score, 0.98); }
      out.push({ type:tag, label, xpath:best.xpath, css, confidence:best.score, why:best.why, strategies, framePath: frameInfo.path, frameDescriptors: frameInfo.chain.map(c=>c.descriptor) });
    }catch(e){}
  });
  return out;
}

// helper to generate locators for a single element (used by clicking preview)
function generateLocatorsForElement(el, actionInfo){
  const xpath = getXPath(el) || buildHierarchyXPath(el);
  const css = cssSelectorFor(el);
  const frameInfo = buildFramePathForElement(el);
  const summary = { xpath, css, framePath: frameInfo.path, label: pickBestLabel(el) || el.tagName.toLowerCase() };
  // build code string (simple multi-framework)
  const code = `// Meta: ${JSON.stringify(summary)}\n// Selenium: await driver.findElement(By.xpath(${JSON.stringify(xpath)})).click();\n// Playwright: await page.locator('xpath=${xpath}').click();\n`;
  return { meta: { tag: el.tagName.toLowerCase(), id: el.id || '', name: el.name || '', role: el.getAttribute && el.getAttribute('role') }, code, summary };
}

// fallback getXPath (absolute-ish)
function getXPath(el){
  try {
    if(typeof NS.bestXPath === 'function') return NS.bestXPath(el);
  } catch(e){}
  const parts = [];
  let node = el;
  while(node && node.nodeType === 1){
    let idx = 1;
    let sib = node.previousSibling;
    while(sib){
      if(sib.nodeType === 1 && sib.nodeName === node.nodeName) idx++;
      sib = sib.previousSibling;
    }
    const name = node.nodeName.toLowerCase();
    parts.unshift(`${name}${idx>1 ? '['+idx+']' : ''}`);
    node = node.parentNode;
    if(node && node.nodeType === 9) break;
  }
  return '//' + parts.join('/');
}
  
  /* ===================================================
  7. Locator List UI & Validation
  Fill list, copy snippets, validate in preview (frame-aware)
=================================================== */
function makePlaywrightLocator(it){
  const label = it.label || '';
  if(it.why && it.why.startsWith('text')) return `page.getByText("${label.replace(/"/g,'\\"')}")`;
  if(it.css) return `page.locator('${it.css.replace(/'/g,"\\'")}')`;
  return `page.locator('xpath=${it.xpath}')`;
}

async function validateInPreview(xpathOrLocator, opts){
  opts = opts || {};
  let locator = null;
  if(typeof xpathOrLocator === 'object' && xpathOrLocator.xpath) locator = xpathOrLocator;
  else locator = { xpath: xpathOrLocator };
  // try frame-scoped
  try {
    if(locator.frameDescriptors && typeof findElementByFrameChainAndXPath === 'function'){
      const found = findElementByFrameChainAndXPath(locator.frameDescriptors, locator.xpath);
      if(found && found.el){ highlightElementInIframe(found.el, { color: opts.color || '3px solid magenta', flash:true }); return true; }
    }
  } catch(e){ dbg('frame validate failed', e); }
  // fallback to preview doc
  try {
    const pd = getPreviewDocument();
    if(!pd) return null;
    const node = pd.evaluate(locator.xpath, pd, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
    if(node){ highlightElementInIframe(node, { color: opts.color || '3px solid magenta', flash:true }); return true; }
  } catch(e){ dbg('preview eval fail', e); }
  // If we couldn't determine (e.g., XOS), return null (unknown)
  return null;
}

function generateLocatorSnippet(it){
  const varName = sanitizeVar(it.label || it.type || 'elem');
  // default language Java for POM
  return `@FindBy(xpath="${it.xpath}")\nWebElement ${varName};`;
}

function fillLocatorList(){
  const locList = $('#locList') || document.createElement('div');
  if(!$('#locList')) document.body.appendChild(locList);
  locList.innerHTML = '';
  NS.CURRENT_LOCATORS.forEach((it,i)=>{
    const div = document.createElement('div'); div.className='loc-row'; div.dataset.i=i;
    div.innerHTML = `
      <div style="display:flex;align-items:center;gap:8px">
        <span class="badge">${it.type}</span>
        <div>
          <div style="font-weight:700">${escapeHtml(it.label)}</div>
          <div class="small">${escapeHtml(it.xpath)} [${Math.round((it.confidence||0)*100)}% - ${it.why||'-'}] ${it.framePath? '| iframe: '+escapeHtml(it.framePath):''}</div>
        </div>
      </div>
      <div style="display:flex;gap:6px;align-items:center">
        <button class="btn" data-x>XPath</button>
        <button class="btn" data-c>CSS</button>
        <button class="btn" data-p>Playwright</button>
        <button class="btn" data-v>Validate</button>
      </div>`;
    div.querySelector('[data-x]').addEventListener('click', e=>{ safeCopy(it.xpath); e.stopPropagation(); });
    div.querySelector('[data-c]').addEventListener('click', e=>{ safeCopy(it.css || '(no css)'); e.stopPropagation(); });
    div.querySelector('[data-p]').addEventListener('click', e=>{ safeCopy(makePlaywrightLocator(it)); e.stopPropagation(); });
    div.querySelector('[data-v]').addEventListener('click', e=>{ validateInPreview(it); e.stopPropagation(); });
    // hover highlight with debounce
    let hoverT = null;
    div.addEventListener('mouseenter', ()=>{ hoverT = setTimeout(()=> validateInPreview(it, { silent:true }), 150); });
    div.addEventListener('mouseleave', ()=>{ clearTimeout(hoverT); });
    div.addEventListener('click', ()=> safeCopy(it.xpath));
    locList.appendChild(div);
  });
}
  
  /* ===================================================
  8. Render Preview (use this to show preview)
  Call: await renderPreview('<html>..</html>') or renderPreview(document)
=================================================== */
async function renderPreview(sourceHtmlOrDoc, options){
  options = options || {};
  const preferHighlightFirst = options.highlightFirst !== false;
  const height = options.height || '60vh';

  // ensure preview element exists (create a dedicated iframe with id=preview if missing)
  let frame = getPreviewElement();
  if(!frame || !(frame.tagName && frame.tagName.toLowerCase()==='iframe')){
    // create one inside a container or body
    frame = document.createElement('iframe'); frame.id = 'preview';
    frame.style.cssText = `width:100%; height:${height}; border:1px solid #ddd; border-radius:6px;`;
    const ins = document.getElementById('previewCard') || document.body;
    ins.appendChild(frame);
  }

  // detach previous handlers to avoid dupes
  detachAllPreviewHandlers();

  // set content
  if (sourceHtmlOrDoc && typeof sourceHtmlOrDoc === 'object' && sourceHtmlOrDoc.nodeType === 9){
    try { frame.srcdoc = (new XMLSerializer()).serializeToString(sourceHtmlOrDoc); } catch(e){
      try { frame.contentWindow.document.open(); frame.contentWindow.document.write(sourceHtmlOrDoc.documentElement.outerHTML); frame.contentWindow.document.close(); } catch(err){ window._PARSER_DOC = sourceHtmlOrDoc; showToast('Preview not writable; using parsed DOM fallback.','info'); }
    }
  } else if (typeof sourceHtmlOrDoc === 'string') {
    frame.srcdoc = sourceHtmlOrDoc;
  } else {
    if(window._PARSER_DOC && !frame.srcdoc) frame.srcdoc = (new XMLSerializer()).serializeToString(window._PARSER_DOC);
  }

  // wait for load
  function waitForFrameLoad(f, timeout=3000){
    return new Promise((resolve)=>{
      let done=false;
      function finish(doc){ if(done) return; done=true; resolve(doc); }
      try { if (f.contentDocument && (f.contentDocument.readyState === 'complete' || f.contentDocument.readyState === 'interactive')) return finish(f.contentDocument); } catch(e){}
      const onload = ()=>{ try{ finish(f.contentDocument); } catch(e){ finish(null); } };
      f.addEventListener('load', onload, { once:true });
      setTimeout(()=> finish(f.contentDocument || null), timeout);
    });
  }

  const previewDoc = await waitForFrameLoad(frame, 2500);
  if(previewDoc){
    try {
      const old = NS.CURRENT_DOC;
      NS.CURRENT_DOC = previewDoc;
      // attach interaction listeners so clicking in preview adds custom locators
      attachPreviewHandler(previewDoc, 'click', interactivePreviewClickHandler);
      attachPreviewHandler(previewDoc, 'change', interactivePreviewChangeHandler);
      // attempt extraction if available
      if(typeof window.extractAllLocators === 'function') window.extractAllLocators(true);
      NS.CURRENT_DOC = old;
      if(preferHighlightFirst && Array.isArray(NS.CURRENT_LOCATORS) && NS.CURRENT_LOCATORS.length){
        const first = NS.CURRENT_LOCATORS[0];
        if(first && first.xpath){
          try{
            const node = previewDoc.evaluate(first.xpath, previewDoc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
            if(node){ node.style.boxShadow = '0 0 0 4px rgba(0,150,255,0.3)'; setTimeout(()=>{ node.style.boxShadow=''; }, 1600); }
          } catch(e){ dbg('highlight first failed', e); }
        }
      }
      showToast(`Preview loaded — ${NS.CURRENT_LOCATORS.length||0} locators`, 'success');
      return previewDoc;
    } catch(e){ dbg('post-load extraction failed', e); showToast('Preview loaded; extraction fallback','info'); }
  }

  // srcdoc parse fallback
  try {
    const src = frame.srcdoc || frame.getAttribute('srcdoc') || null;
    if(src){
      const doc = (new DOMParser()).parseFromString(src,'text/html');
      window._PARSER_DOC = doc;
      if(typeof window.extractAllLocators === 'function') window.extractAllLocators();
      showToast('Preview parsed (srcdoc)', 'info');
      return doc;
    }
  } catch(e){ dbg('srcdoc parse failed', e); }
  // final fallback: extract from current DOM
  try { if(typeof window.extractAllLocators === 'function'){ window.extractAllLocators(); showToast('Extracted from main doc','info'); } } catch(e){ dbg('final extract failed', e); }

  return null;
}
  
  /* ===================================================
  9. InteractionToLocators
  Click in preview -> generate snippets + push to Custom list
=================================================== */
function appendOutputSnippet(snippet){
  const out = (['#locators-custom', '#custom-output', 'textarea.output', '#output', '#locator-dump'].map(s=>document.querySelector(s)).find(Boolean));
  if(out){
    if(out.tagName === 'TEXTAREA' || out.tagName === 'INPUT') out.value = (out.value || '') + snippet + '\n\n';
    else { const pre = document.createElement('pre'); pre.style.whiteSpace='pre-wrap'; pre.textContent = snippet; out.appendChild(pre); }
  } else console.log(snippet);
}

function dedupeAddCustom(locatorObj){
  const key = (locatorObj.summary && locatorObj.summary.xpath || '') + '||' + (locatorObj.summary && locatorObj.summary.framePath || '');
  if(NS.CUSTOM_LOCATORS.some(x => ((x.summary && x.summary.xpath) || '') + '||' + ((x.summary && x.summary.framePath) || '') === key)) return false;
  NS.CUSTOM_LOCATORS.push({...locatorObj, selected:true, lastValidation: null });
  renderCustomList();
  return true;
}

function interactivePreviewClickHandler(e){
  try {
    e.preventDefault(); e.stopPropagation();
    const el = e.target;
    if(!el) return;
    const locatorObj = generateLocatorsForElement(el, { type:'click' });
    flashElement(el, 'rgba(90,72,240,0.9)');
    const added = dedupeAddCustom(locatorObj);
    if(added){ appendOutputSnippet(locatorObj.code); showToast('Custom locator added', 'success'); } else showToast('Locator already present','info');
  } catch(err){ console.error(err); }
}

function interactivePreviewChangeHandler(e){
  try {
    const el = e.target; if(!el) return;
    const val = el.value !== undefined ? el.value : '';
    const locatorObj = generateLocatorsForElement(el, { type:'change', value: val });
    flashElement(el, 'rgba(90,72,240,0.9)');
    const added = dedupeAddCustom(locatorObj);
    if(added){ appendOutputSnippet(locatorObj.code); showToast('Custom locator added', 'success'); } else showToast('Locator already present','info');
  } catch(err){ console.error(err); }
}

function flashElement(el, color){
  try { const prev = el.style.boxShadow || ''; el.style.boxShadow = `0 0 0 4px ${color}`; el.scrollIntoView({behavior:'smooth', block:'center'}); setTimeout(()=>{ try{ el.style.boxShadow = prev; }catch(e){} }, 1600); } catch(e){}
}
  
  /* ===================================================
  10. Custom Locators UI & Edit / Preview / Save / Export
  paste last.
=================================================== */
function ensureCustomListUI(){
  let container = document.querySelector('#locators-custom');
  if(container) return container;
  const rightCard = document.querySelector('#rightCard') || document.body;
  container = document.createElement('div'); container.id='locators-custom';
  container.style.marginTop='12px';
  container.innerHTML = `
    <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:8px">
      <strong>Custom locators</strong>
      <div style="display:flex;gap:6px">
        <button id="btnSelectAll" class="btn small">Select all</button>
        <button id="btnDeselectAll" class="btn small">Deselect all</button>
        <button id="btnCopyCombined" class="btn small">Copy combined</button>
        <button id="btnExportCustom" class="btn small">Export Selected</button>
        <button id="btnClearCustom" class="btn small">Clear</button>
      </div>
    </div>
    <div id="custom-list-inner" style="display:flex;flex-direction:column;gap:8px"></div>
  `;
  rightCard.appendChild(container);

  container.querySelector('#btnSelectAll').addEventListener('click', ()=>{ NS.CUSTOM_LOCATORS.forEach(x=>x.selected=true); renderCustomList(); });
  container.querySelector('#btnDeselectAll').addEventListener('click', ()=>{ NS.CUSTOM_LOCATORS.forEach(x=>x.selected=false); renderCustomList(); });
  container.querySelector('#btnCopyCombined').addEventListener('click', async ()=>{ 
    const sel = NS.CUSTOM_LOCATORS.filter(x=>x.selected!==false);
    if(!sel.length){ showToast('No locators selected','error'); return; }
    const combined = sel.map(s=>s.code).join('\n\n'); await safeCopy(combined); 
  });
  container.querySelector('#btnExportCustom').addEventListener('click', ()=>{ 
    const sel = NS.CUSTOM_LOCATORS.filter(x=>x.selected!==false);
    if(!sel.length){ showToast('No locators selected','error'); return; }
    const combined = sel.map(s=>s.code).join('\n\n');
    const blob = new Blob([combined], {type:'text/plain'}); const url = URL.createObjectURL(blob);
    const a = document.createElement('a'); a.href = url; a.download = 'custom-locators.txt'; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
    showToast(`${sel.length} locators exported`, 'success');
  });
  container.querySelector('#btnClearCustom').addEventListener('click', ()=>{ NS.CUSTOM_LOCATORS=[]; renderCustomList(); showToast('Cleared','info'); });

  return container;
}

function renderCustomList(){
  ensureCustomListUI();
  const inner = document.querySelector('#custom-list-inner'); inner.innerHTML = '';
  NS.CUSTOM_LOCATORS.forEach((it, idx)=>{
    const row = document.createElement('div'); row.className='custom-row'; row.dataset.idx=idx;
    row.style.display='flex'; row.style.alignItems='flex-start'; row.style.gap='8px'; row.style.padding='8px'; row.style.border='1px solid rgba(255,255,255,0.03)'; row.style.borderRadius='8px';
    const cb = document.createElement('input'); cb.type='checkbox'; cb.checked = (it.selected !== false);
    cb.addEventListener('change', ()=>{ NS.CUSTOM_LOCATORS[idx].selected = cb.checked; });
    const mid = document.createElement('div'); mid.style.flex='1';
    const labelDiv = document.createElement('div'); labelDiv.style.fontWeight='700'; labelDiv.style.marginBottom='6px'; labelDiv.innerHTML = `<span class="label-text">${escapeHtml(it.summary.label||'')}</span>`;
    const metaDiv = document.createElement('div'); metaDiv.style.fontSize='12px'; metaDiv.style.color='#9db0c5'; metaDiv.style.wordBreak='break-all';
    metaDiv.innerHTML = `<div class="xpath-text">${escapeHtml(it.summary.xpath || '')}</div><div style="font-size:11px;color:#7b99ad;margin-top:4px">${it.summary.framePath ? 'iframe: '+escapeHtml(it.summary.framePath) : ''}</div>`;
    mid.appendChild(labelDiv); mid.appendChild(metaDiv);

    const right = document.createElement('div'); right.style.display='flex'; right.style.gap='6px';
    const btnCopy = document.createElement('button'); btnCopy.className='btn small'; btnCopy.textContent='Copy';
    const btnEdit = document.createElement('button'); btnEdit.className='btn small'; btnEdit.textContent='Edit';
    const btnRemove = document.createElement('button'); btnRemove.className='btn small'; btnRemove.textContent='Remove';
    right.appendChild(btnCopy); right.appendChild(btnEdit); right.appendChild(btnRemove);

    btnCopy.addEventListener('click', async ()=>{ await safeCopy(it.code); showToast('Copied snippet','success'); });
    btnRemove.addEventListener('click', ()=>{ NS.CUSTOM_LOCATORS.splice(idx,1); renderCustomList(); });

    btnEdit.addEventListener('click', ()=>{
      enableEnhancedEditMode(row, idx);
    });

    row.appendChild(cb); row.appendChild(mid); row.appendChild(right);
    inner.appendChild(row);

    // validation badge if present
    const badgeState = it.lastValidation === true ? 'ok' : (it.lastValidation === false ? 'fail' : 'unknown');
    const badge = document.createElement('span'); badge.className='val-badge';
    badge.style.marginLeft='6px'; badge.style.padding='2px 6px'; badge.style.borderRadius='12px'; badge.style.fontSize='12px'; badge.style.verticalAlign='middle';
    if(badgeState==='ok'){ badge.textContent='✔'; badge.style.background='#13ce66'; badge.style.color='#042'; }
    else if(badgeState==='fail'){ badge.textContent='✖'; badge.style.background='#ff6b6b'; badge.style.color='#300'; }
    else { badge.textContent='○'; badge.style.background='#d1d5db'; badge.style.color='#213'; }
    btnEdit.parentNode.insertBefore(badge, btnEdit.nextSibling);

    // click badge to re-validate (REPLACEMENT: preserve null as unknown)
    badge.addEventListener('click', async ()=>{
      const ok = (typeof window.AdhyPatch.previewEditedXPath === 'function') ? await window.AdhyPatch.previewEditedXPath(it.summary.xpath, it) : null;
      // store true / false / null (unknown)
      it.lastValidation = (ok === true) ? true : (ok === false ? false : null);
      it.lastValidationAt = Date.now();
      renderCustomList();
    });
  });
}

// enhanced edit UI (Preview & Save) - used by btnEdit
function enableEnhancedEditMode(rowEl, idx){
  const it = NS.CUSTOM_LOCATORS[idx];
  if(!it) return;
  const mid = rowEl.querySelector('div:nth-child(2)');
  if(!mid) return;
  mid.innerHTML = '';
  const labelInput = document.createElement('input'); labelInput.type='text'; labelInput.value = it.summary.label || ''; labelInput.style.width='100%'; labelInput.style.marginBottom='6px';
  const xpathInput = document.createElement('textarea'); xpathInput.value = it.summary.xpath || ''; xpathInput.style.width='100%'; xpathInput.style.height='88px'; xpathInput.style.fontFamily='monospace'; xpathInput.style.fontSize='12px';
  const controls = document.createElement('div'); controls.style.display='flex'; controls.style.gap='6px'; controls.style.marginTop='6px';
  const btnPreview = document.createElement('button'); btnPreview.className='btn small'; btnPreview.textContent='Preview XPath';
  const btnSave = document.createElement('button'); btnSave.className='btn small'; btnSave.textContent='Save';
  const btnCancel = document.createElement('button'); btnCancel.className='btn small'; btnCancel.textContent='Cancel';
  const statusIcon = document.createElement('span'); statusIcon.style.marginLeft='8px'; statusIcon.textContent='○';
  controls.appendChild(btnPreview); controls.appendChild(btnSave); controls.appendChild(btnCancel); controls.appendChild(statusIcon);
  mid.appendChild(labelInput); mid.appendChild(xpathInput); mid.appendChild(controls);

  btnPreview.addEventListener('click', async ()=>{
    const xpath = xpathInput.value.trim();
    if(!xpath){ showToast('Enter XPath to preview','error'); return; }
    const ok = (typeof window.AdhyPatch.previewEditedXPath === 'function') ? await window.AdhyPatch.previewEditedXPath(xpath, it) : null;
    statusIcon.textContent = ok ? '✔' : '✖';
  });

  btnSave.addEventListener('click', async ()=>{
    const newLabel = labelInput.value.trim();
    const newXpath = xpathInput.value.trim();
    if(!newXpath){ showToast('XPath cannot be empty','error'); return; }
    // update summary and regenerate code (Playwright frameLocator + Selenium comment)
    it.summary.label = newLabel || it.summary.label;
    it.summary.xpath = newXpath;
    // attempt to re-evaluate to set frameDescriptors if possible
    try {
      const el = (it.frameDescriptors && typeof findElementByFrameChainAndXPath === 'function') ? (findElementByFrameChainAndXPath(it.frameDescriptors, it.summary.xpath) || null) : null;
      if(!el){
        // try preview doc
        const pd = getPreviewDocument();
        const node = pd && pd.evaluate ? pd.evaluate(it.summary.xpath, pd, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue : null;
        if(node){
          const info = buildFramePathForElement(node);
          it.summary.framePath = info.path;
          it.frameDescriptors = info.chain.map(c=>c.descriptor);
        }
      } else {
        // if el was found via frameChain replay, it returned an object {el,win}
        if(el.el){
          const info = buildFramePathForElement(el.el);
          it.summary.framePath = info.path;
          it.frameDescriptors = info.chain.map(c=>c.descriptor);
        }
      }
    } catch(e){ dbg('save: unable to recompute frameDescriptors', e); }
    // auto-detect action type
    const tag = (it.meta && it.meta.tag) || (it.summary && it.summary.label && it.summary.label.split(' ')[0]) || 'element';
    const actionType = detectActionTypeFromTagNameAndAttrs(tag);
    it.actionType = actionType;
    // rebuild code
    it.code = (typeof NS.rebuildCodeFromSummaryEnhanced === 'function') ? NS.rebuildCodeFromSummaryEnhanced(it.summary, actionType) : it.code;
    // validate & mark (REPLACEMENT: preserve null as unknown)
    const ok = (typeof window.AdhyPatch.previewEditedXPath === 'function') ? await window.AdhyPatch.previewEditedXPath(it.summary.xpath, it) : null;
    it.lastValidation = (ok === true) ? true : (ok === false ? false : null);
    it.lastValidationAt = Date.now();
    renderCustomList();
    showToast('Saved & snippets rebuilt', 'success');
  });

  btnCancel.addEventListener('click', ()=> renderCustomList());
}

// small detector for action type (used in save)
function detectActionTypeFromTagNameAndAttrs(tag, el){
  tag = (tag||'').toLowerCase();
  if(tag === 'input'){
    const t = el && el.getAttribute && el.getAttribute('type') ? el.getAttribute('type').toLowerCase() : '';
    if(t === 'checkbox') return 'check';
    if(t === 'radio') return 'click';
    return 'fill';
  }
  if(tag === 'textarea' || tag === 'select') return 'fill';
  if(tag === 'button' || tag === 'a') return 'click';
  return 'click';
}

// expose helper API
NS.getCustomLocators = ()=> NS.CUSTOM_LOCATORS.slice();
NS.addCustomLocator = (obj)=> { const added = dedupeAddCustom(obj); if(added) { renderCustomList(); } return added; };
NS.clearCustomLocators = ()=> { NS.CUSTOM_LOCATORS=[]; renderCustomList(); };

// initial render
ensureCustomListUI();
renderCustomList();
  
  
</script>
</body>
</html>
