<script>
/* === AdhyPatch â€” Full merged script: Custom-tab auto-activate & append on preview click === */
window.AdhyPatch = window.AdhyPatch || {};
const NS = window.AdhyPatch;

// Minimal safe init
NS.version = NS.version || 'adhy-custom-3.1';
NS.CURRENT_LOCATORS = NS.CURRENT_LOCATORS || [];
NS.CUSTOM_LIST = NS.CUSTOM_LIST || [];

// --------------------------------- Utilities ---------------------------------
(function(){
  NS.$ = NS.$ || ((s, root=document) => { try { return (root||document).querySelector(s); } catch(e){ return null; }});
  NS.$$ = NS.$$ || ((s, root=document) => { try { return Array.from((root||document).querySelectorAll(s)); } catch(e){ return []; }});

  NS.showToast = NS.showToast || function(msg, type='info'){
    try {
      let t = document.getElementById('__adhy_toast');
      if(!t){
        t = document.createElement('div');
        t.id = '__adhy_toast';
        t.style.cssText = 'position:fixed;right:16px;bottom:16px;padding:8px 12px;border-radius:8px;background:rgba(0,0,0,0.78);color:#fff;z-index:2147483647;font-family:system-ui,Segoe UI,Roboto;opacity:1;transition:opacity .18s';
        document.body.appendChild(t);
      }
      t.textContent = msg;
      t.style.background = (type==='error')? '#b91c1c' : (type==='success')? '#047857' : 'rgba(0,0,0,0.78)';
      t.style.opacity = '1';
      clearTimeout(t._t);
      t._t = setTimeout(()=> { try{ t.style.opacity = '0'; } catch(e){} }, 1500);
    } catch(e){ console.log(msg); }
  };

  NS.copyToClipboard = NS.copyToClipboard || async function(text){
    try {
      if(navigator.clipboard && navigator.clipboard.writeText){
        await navigator.clipboard.writeText(text);
        NS.showToast('Copied', 'success');
        return true;
      }
    } catch(e){}
    try {
      const ta = document.createElement('textarea');
      ta.value = text; ta.style.position = 'fixed'; ta.style.left = '-9999px';
      document.body.appendChild(ta); ta.select();
      document.execCommand && document.execCommand('copy');
      document.body.removeChild(ta);
      NS.showToast('Copied (fallback)', 'success');
      return true;
    } catch(e){
      NS.showToast('Copy failed', 'error');
      return false;
    }
  };

  NS.escapeHtml = NS.escapeHtml || function(s){ return (s||'').toString().replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;'); };
  NS.xpathLiteral = NS.xpathLiteral || function(s){ s = String(s||''); if (s.indexOf('"') === -1) return `"${s}"`; if (s.indexOf("'") === -1) return `'${s}'`; return `"${s.replace(/"/g,'\\"')}"`; };
  NS.cssSelectorFor = NS.cssSelectorFor || function(el){ if(!el||!el.tagName) return ''; if(el.id) return '#'+el.id; let sel = el.tagName.toLowerCase(); if(el.classList && el.classList.length) sel += '.' + Array.from(el.classList).slice(0,3).join('.'); if(el.getAttribute && el.getAttribute('name')) sel += `[name="${el.getAttribute('name')}"]`; return sel; };
})();

// --------------------------- Preview helpers ---------------------------
(function(){
  NS.getPreviewElement = function(){
    return NS.$('#preview') || document.querySelector('iframe#preview') || document.querySelector('iframe') || null;
  };
  NS.getPreviewDocument = function(){
    const p = NS.getPreviewElement();
    if(!p) return window._PARSER_DOC || document;
    try { if(p.tagName && p.tagName.toLowerCase()==='iframe' && p.contentDocument) return p.contentDocument; } catch(e){}
    if(window._PARSER_DOC) return window._PARSER_DOC;
    return document;
  };
})();

// ------------------------- Locator generators -------------------------
(function(){
  function safeAttr(el, name){ try { return el.getAttribute ? el.getAttribute(name) : null; } catch(e){ return null; } }
  function getLabelFor(el){
    try {
      if(!el) return '';
      if(el.id){
        try { const lab = (document.querySelector && document.querySelector(`label[for="${el.id}"]`)); if(lab && lab.textContent) return lab.textContent.trim(); }catch(e){}
      }
      const p = el.closest && el.closest('label'); if(p && p.textContent) return p.textContent.trim();
      const t = (el.innerText || el.textContent || '').trim();
      if(t) return t.slice(0,160);
      const ph = safeAttr(el,'placeholder'); if(ph) return ph;
      return '';
    } catch(e){ return ''; }
  }

  NS.genBasicXPath = function(el){
    if(!el) return '';
    if(el.id) return `//*[@id=${NS.xpathLiteral(el.id)}]`;
    const tag = el.tagName.toLowerCase();
    const name = safeAttr(el,'name'); if(name) return `//${tag}[@name=${NS.xpathLiteral(name)}]`;
    const label = getLabelFor(el); if(label) return `//${tag}[contains(normalize-space(.), ${NS.xpathLiteral(label)})]`;
    // fallback short path
    const parts=[]; let cur=el; let depth=0;
    while(cur && cur.nodeType===1 && depth<8){
      const t = cur.tagName.toLowerCase();
      let ix = 1; let sib = cur.previousElementSibling;
      while(sib){ if(sib.tagName === cur.tagName) ix++; sib = sib.previousElementSibling; }
      parts.unshift(`${t}${ix>1?`[${ix}]`:''}`); cur = cur.parentElement; depth++;
    }
    return '//' + parts.join('/');
  };

  NS.genWildcardXPath = function(el){
    if(!el) return '';
    if(el.id) return `//*[@id=${NS.xpathLiteral(el.id)}]`;
    const label = getLabelFor(el);
    if(label) return `//*[contains(normalize-space(.), ${NS.xpathLiteral(label)})]`;
    const cls = safeAttr(el,'class') || '';
    if(cls) {
      const first = cls.split(/\s+/).filter(Boolean)[0];
      if(first) return `//*[contains(concat(' ', normalize-space(@class), ' '), ${NS.xpathLiteral(' '+first+' ')})]`;
    }
    return NS.genBasicXPath(el);
  };

  NS.genAxesXPath = function(el){
    if(!el) return '';
    const tag = el.tagName.toLowerCase();
    const id = el.id;
    if(id) return `//label[@for=${NS.xpathLiteral(id)}]/following::${tag}[1]`;
    const lab = getLabelFor(el);
    if(lab) return `//label[contains(normalize-space(.), ${NS.xpathLiteral(lab)})]/following::${tag}[1]`;
    return NS.genBasicXPath(el);
  };

  NS.genFunctionXPath = function(el){
    if(!el) return NS.genBasicXPath(el);
    const tag = el.tagName.toLowerCase();
    const ph = safeAttr(el,'placeholder'); if(ph) return `//${tag}[contains(@placeholder, ${NS.xpathLiteral(ph)})]`;
    const aria = safeAttr(el,'aria-label'); if(aria) return `//${tag}[@aria-label=${NS.xpathLiteral(aria)}]`;
    return NS.genBasicXPath(el);
  };

  NS.genSalesforceXPath = function(el){
    if(!el) return '';
    if(safeAttr(el,'data-qa-locator')) return `//*[@data-qa-locator=${NS.xpathLiteral(safeAttr(el,'data-qa-locator'))}]`;
    if(safeAttr(el,'data-id')) return `//*[@data-id=${NS.xpathLiteral(safeAttr(el,'data-id'))}]`;
    return '';
  };

  NS.genPegaXPath = function(el){
    if(!el) return '';
    if(safeAttr(el,'data-test-id')) return `//*[@data-test-id=${NS.xpathLiteral(safeAttr(el,'data-test-id'))}]`;
    if(safeAttr(el,'data-ctl')) return `//*[@data-ctl=${NS.xpathLiteral(safeAttr(el,'data-ctl'))}]`;
    return '';
  };

  NS.generateLocatorsForElement = function(el){
    if(!el) return null;
    return {
      tag: el.tagName.toLowerCase(),
      text: getLabelFor(el) || '',
      xpaths: {
        basic: NS.genBasicXPath(el),
        wildcards: NS.genWildcardXPath(el),
        axes: NS.genAxesXPath(el),
        functions: NS.genFunctionXPath(el),
        salesforce: NS.genSalesforceXPath(el),
        pega: NS.genPegaXPath(el)
      },
      css: NS.cssSelectorFor(el)
    };
  };
})();

// -------------------- Custom list UI helpers --------------------
(function(){
  // ensure Custom tab exists (if not, create a 'custom' chip)
  function ensureCustomChip(){
    let customChip = NS.$('.chip[data-paneltab="custom"]');
    if(!customChip){
      const tabs = NS.$('#locatorTabs');
      if(!tabs) return null;
      customChip = document.createElement('div');
      customChip.className = 'chip';
      customChip.dataset.paneltab = 'custom';
      customChip.textContent = 'Custom';
      tabs.appendChild(customChip);
      customChip.addEventListener('click', ()=>{ activatePanel('custom'); });
    }
    return customChip;
  }

  function activatePanel(name){
    NS.$$('.chip').forEach(c=>c.classList.remove('active'));
    const chip = NS.$(`.chip[data-paneltab="${name}"]`);
    if(chip) chip.classList.add('active');
    // if switching to non-custom, we can re-render main list. If switching to custom, show custom.
    if(name === 'custom') {
      renderCustomList();
    } else {
      // show default extraction for the panel name if available
      NS.fillLocatorList && NS.fillLocatorList(name);
    }
  }

  // render single 'loc-row' (strategy row) element
  function buildRow(idx, strategyLabel, value){
    const row = document.createElement('div');
    row.className = 'loc-row';
    row.style.display = 'flex';
    row.style.alignItems = 'center';
    row.style.gap = '8px';
    // left badge (index)
    const badge = document.createElement('div'); badge.className='badge'; badge.textContent = idx+1;
    // strategy label
    const lbl = document.createElement('div'); lbl.style.width='110px'; lbl.style.fontWeight='700'; lbl.textContent = strategyLabel;
    // value
    const vdiv = document.createElement('div'); vdiv.className='mono'; vdiv.style.flex='1'; vdiv.style.wordBreak='break-word'; vdiv.style.whiteSpace='pre-wrap'; vdiv.textContent = value || '(none)';
    // actions
    const copy = document.createElement('button'); copy.className='btn'; copy.textContent='Copy'; copy.style.width='72px';
    const hi = document.createElement('button'); hi.className='btn'; hi.textContent='Highlight'; hi.style.width='90px';
    // row click = copy + highlight
    row.addEventListener('click', async (e) => {
      if(e.target && e.target.tagName === 'BUTTON') return; // let buttons handle it
      if(!vdiv.textContent) return;
      await NS.copyToClipboard(vdiv.textContent);
      NS.tryHighlightByXPath && NS.tryHighlightByXPath(vdiv.textContent);
    });
    // buttons
    copy.addEventListener('click', async (ev) => { ev.stopPropagation(); if(!vdiv.textContent) return; await NS.copyToClipboard(vdiv.textContent); });
    hi.addEventListener('click', (ev) => { ev.stopPropagation(); if(!vdiv.textContent) return; NS.tryHighlightByXPath && NS.tryHighlightByXPath(vdiv.textContent); });

    row.appendChild(badge); row.appendChild(lbl); row.appendChild(vdiv); row.appendChild(copy); row.appendChild(hi);
    return row;
  }

  // render entire custom list (stacked entries, each showing strategies)
  function renderCustomList(){
    const box = NS.$('#locList');
    if(!box) return;
    box.innerHTML = '';
    if(!Array.isArray(NS.CUSTOM_LIST) || NS.CUSTOM_LIST.length === 0){
      box.innerHTML = '<div class="small">No custom entries. Click elements in the preview to add them.</div>';
      return;
    }
    NS.CUSTOM_LIST.forEach((loc, idx) => {
      // container header for this captured element
      const header = document.createElement('div');
      header.style.padding = '8px'; header.style.borderBottom = '1px solid #e6ecf5'; header.style.background = '#f7f9fc';
      header.innerHTML = `<div style="font-weight:800">${NS.escapeHtml(loc.text||loc.tag||('Element '+(idx+1)))}</div><div class="small" style="color:#6b7280">${NS.escapeHtml(loc.css||'')}</div>`;
      box.appendChild(header);
      // strategies
      const strategies = ['basic','wildcards','axes','functions','salesforce','pega'];
      strategies.forEach(s=>{
        const v = (loc.xpaths && loc.xpaths[s]) || '';
        const row = buildRow(idx, s.toUpperCase(), v || '(none)');
        box.appendChild(row);
      });
      // CSS row
      const cssRow = buildRow(idx, 'CSS', loc.css || '(none)');
      box.appendChild(cssRow);
    });
    // update loc-count if present
    const count = NS.$('#loc-count'); if(count) count.textContent = `${NS.CUSTOM_LIST.length} custom element(s)`;
  }

  // public helpers
  NS.ensureCustomChip = ensureCustomChip;
  NS.activatePanel = activatePanel;
  NS.renderCustomList = renderCustomList;

  // initialize: ensure chip exists and bind default click for existing chips
  setTimeout(()=>{
    NS.ensureCustomChip();
    // wire tab clicks to render correct lists
    NS.$$('.chip').forEach(c=>{
      if(c._bound) return;
      c._bound = true;
      c.addEventListener('click', ()=>{
        const n = c.dataset.paneltab || null;
        if(n) NS.activatePanel(n);
      });
    });
  }, 80);
})();

// -------------------- Attach handlers to preview & click flow --------------------
(function(){
  // helper to attach event listeners to preview doc (iframe or parsed doc)
  function attachToPreviewDoc(){
    const previewEl = NS.getPreviewElement();
    if(!previewEl) return;
    try {
      if(previewEl.tagName && previewEl.tagName.toLowerCase() === 'iframe'){
        // try contentDocument
        try {
          const pd = previewEl.contentDocument;
          if(pd){
            // remove previous listeners we added on that doc (by flag)
            if(pd.__adhy_click_attached) return;
            pd.__adhy_click_attached = true;
            pd.addEventListener('click', previewClickHandler, true);
          } else {
            // attach on load
            previewEl.addEventListener('load', ()=> {
              try { const pd2 = previewEl.contentDocument; if(pd2 && !pd2.__adhy_click_attached){ pd2.__adhy_click_attached = true; pd2.addEventListener('click', previewClickHandler, true); } } catch(e){}
            }, {once:true});
          }
        } catch(e){
          // cross-origin - cannot attach; rely on parsed DOM fallback
          console.warn('Preview iframe cross-origin â€” click attach skipped');
        }
      } else {
        // it's inline element (rare); attach to its document
        const pd = NS.getPreviewDocument();
        if(pd && !pd.__adhy_click_attached){
          pd.__adhy_click_attached = true;
          pd.addEventListener('click', previewClickHandler, true);
        }
      }
    } catch(e){ console.warn('attachToPreviewDoc failed', e); }
  }

  // click handler inside preview document
  function previewClickHandler(e){
    try {
      e.preventDefault && e.preventDefault();
      e.stopPropagation && e.stopPropagation();
      const el = e.target;
      if(!el || el.nodeType !== 1) return;
      const loc = NS.generateLocatorsForElement(el);
      if(!loc) return;
      // push into custom list
      NS.CUSTOM_LIST = NS.CUSTOM_LIST || [];
      NS.CUSTOM_LIST.push(loc);
      // ensure custom chip exists and activate it
      const customChip = NS.ensureCustomChip();
      if(customChip){
        // activate custom
        NS.activatePanel('custom');
      }
      // render custom list
      NS.renderCustomList();
      NS.showToast('Captured element into Custom', 'success');
      return false;
    } catch(err){
      console.error('previewClickHandler error', err);
      NS.showToast('Capture failed', 'error');
    }
  }

  // public attach function
  NS.attachHandlersToPreview = function(){
    attachToPreviewDoc();
  };

  // attach on startup (if preview exists)
  setTimeout(()=>{ NS.attachHandlersToPreview(); }, 300);
})();

// -------------------- Minimal extraction & fill list (basic behavior preserved) --------------------
(function(){
  function collectCandidateElements(doc){
    try {
      const selectors = ['input:not([type="hidden"])','button','a','select','textarea','[role="button"]','[data-qa-locator]','[data-test-id]','[data-ctl]','lightning-input','lightning-button'];
      return Array.from((doc || document).querySelectorAll(selectors.join(','))).filter(el=>{
        try {
          if(!el) return false;
          if(el.hasAttribute && el.hasAttribute('hidden')) return false;
          const s = el.getAttribute && el.getAttribute('style') || '';
          if(/display\s*:\s*none|visibility\s*:\s*hidden/.test(s)) return false;
          if(el.tagName && el.tagName.toLowerCase()==='script') return false;
          return true;
        } catch(e){ return false; }
      });
    } catch(e){ return []; }
  }

  NS.extractAllLocators = function(){
    const doc = NS.getPreviewDocument();
    const elems = collectCandidateElements(doc);
    NS.CURRENT_LOCATORS = elems.map(el => NS.generateLocatorsForElement(el));
    // default to basic panel rendering if custom is not active
    const active = NS.$('.chip.active')?.dataset?.paneltab || 'basic';
    if(active !== 'custom'){
      NS.fillLocatorList && NS.fillLocatorList(active);
    } else {
      NS.renderCustomList();
    }
    NS.showToast(`Extracted ${NS.CURRENT_LOCATORS.length} elements`);
    return NS.CURRENT_LOCATORS;
  };

  NS.fillLocatorList = function(panel='basic'){
    const container = NS.$('#locList');
    if(!container) return;
    container.innerHTML = '';
    const data = NS.CURRENT_LOCATORS || [];
    if(!data.length){ container.innerHTML = '<div class="small">No locators. Paste/Render to populate.</div>'; return; }
    data.forEach((it, idx)=>{
      const val = (it.xpaths && it.xpaths[panel]) || it.css || '';
      const row = document.createElement('div'); row.className = 'loc-row';
      row.style.display = 'flex'; row.style.alignItems = 'center'; row.style.justifyContent = 'space-between';
      row.style.gap = '8px';
      const left = document.createElement('div'); left.style.display='flex'; left.style.alignItems='center'; left.style.gap='8px';
      const badge = document.createElement('span'); badge.className='badge'; badge.textContent = it.tag || 'elem';
      const label = document.createElement('div'); label.innerHTML = `<div style="font-weight:700">${NS.escapeHtml(it.text||'(no text)')}</div><div class="small">${NS.escapeHtml(it.css||'')}</div>`;
      left.appendChild(badge); left.appendChild(label);
      const mid = document.createElement('div'); mid.className='mono'; mid.style.flex='1'; mid.style.whiteSpace='nowrap'; mid.style.overflow='hidden'; mid.style.textOverflow='ellipsis'; mid.textContent = val;
      const act = document.createElement('div'); act.style.display='flex'; act.style.gap='6px';
      const btnCopy = document.createElement('button'); btnCopy.className='btn'; btnCopy.textContent='Copy';
      const btnHi = document.createElement('button'); btnHi.className='btn'; btnHi.textContent='Highlight';
      act.appendChild(btnCopy); act.appendChild(btnHi);
      row.appendChild(left); row.appendChild(mid); row.appendChild(act);
      row.addEventListener('click', async (e)=>{ if(e.target && e.target.tagName === 'BUTTON') return; if(!mid.textContent) return; await NS.copyToClipboard(mid.textContent); NS.tryHighlightByXPath && NS.tryHighlightByXPath(mid.textContent); });
      btnCopy.addEventListener('click', async (ev)=>{ ev.stopPropagation(); await NS.copyToClipboard(mid.textContent || ''); });
      btnHi.addEventListener('click', (ev)=>{ ev.stopPropagation(); NS.tryHighlightByXPath && NS.tryHighlightByXPath(mid.textContent || ''); });
      container.appendChild(row);
    });
  };
})();

// -------------------- Render / Clear wiring (preserve preview-only behavior) --------------------
(function(){
  async function renderPreviewFromPaste(){
    try {
      const paste = NS.$('#pasteBox');
      const html = paste && paste.value ? paste.value : '<!doctype html><meta charset="utf-8"><body><h3>No content</h3></body>';
      NS.CURRENT_HTML = html;
      const preview = NS.getPreviewElement();
      if(preview && preview.tagName && preview.tagName.toLowerCase()==='iframe'){
        // strip scripts (minimal sanitization)
        const srcdoc = String(html).replace(/<script[\s\S]*?>[\s\S]*?<\/script>/gi, '');
        try { preview.srcdoc = srcdoc; } catch(e){ NS.showToast('Unable to set iframe srcdoc', 'error'); }
      } else {
        try { const container = NS.$('#preview'); if(container) container.innerHTML = html; } catch(e){}
      }
      // create parsed doc fallback
      try { window._PARSER_DOC = (new DOMParser()).parseFromString(html,'text/html'); } catch(e){}
      setTimeout(()=>{ NS.attachHandlersToPreview(); NS.extractAllLocators(); }, 350);
      NS.showToast('Preview rendered', 'success');
    } catch(e){ console.error(e); NS.showToast('Render failed', 'error'); }
  }

  function clearAll(){
    try {
      const paste = NS.$('#pasteBox'); if(paste) paste.value = '';
      const preview = NS.getPreviewElement();
      if(preview && preview.tagName && preview.tagName.toLowerCase()==='iframe'){
        try { preview.srcdoc = '<body style="font-family:sans-serif"><h3>Preview cleared</h3></body>'; } catch(e){}
      } else { const container = NS.$('#preview'); if(container) container.innerHTML = ''; }
      NS.CURRENT_HTML = ''; NS.CURRENT_LOCATORS = []; NS.CUSTOM_LIST = [];
      const loc = NS.$('#locList'); if(loc) loc.innerHTML = '';
      const out = NS.$('#output'); if(out) out.value = '';
      NS.showToast('Cleared', 'info');
    } catch(e){ console.warn(e); }
  }

  // wire UI buttons if present
  NS.$('#btnRender')?.addEventListener('click', renderPreviewFromPaste);
  NS.$('#btnClear')?.addEventListener('click', clearAll);
  // attach on startup
  setTimeout(()=>{ NS.attachHandlersToPreview(); }, 600);
})();

console.info('AdhyPatch custom-ready. Version:', NS.version);
</script>















<script>
/* =========================
   Adhyan Offline â€” full merged script with Custom tab (complete)
   ========================= */
window.AdhyPatch = window.AdhyPatch || {};
const NS = window.AdhyPatch;

// -------------------- Phase 1: Global state --------------------
NS.version = 'adhy-merged-3.0';
NS.CURRENT_DOC = null;
NS.CURRENT_HTML = '';
NS.CURRENT_LOCATORS = [];
NS.CURRENT_CUSTOM = null;
NS.POM_CACHE = { pom:'', steps:'' };

// -------------------- Phase 2: Utilities --------------------
(function(){
  NS.$ = (s, root=document) => { try { return (root||document).querySelector(s); } catch(e){ return null; } };
  NS.$$ = (s, root=document) => { try { return Array.from((root||document).querySelectorAll(s)); } catch(e){ return []; } };

  NS.showToast = function(msg, type='info'){
    let t = document.getElementById('__adhy_toast');
    if(!t){
      t = document.createElement('div');
      t.id = '__adhy_toast';
      t.style.cssText = 'position:fixed;right:16px;bottom:16px;padding:8px 12px;border-radius:8px;background:#111;color:#fff;z-index:2147483647;font-family:sans-serif;opacity:1;transition:.2s';
      document.body.appendChild(t);
    }
    t.textContent = msg;
    t.style.background = (type==='error')? '#b91c1c' : (type==='success')? '#047857' : '#111';
    t.style.opacity = '1';
    clearTimeout(t._t);
    t._t = setTimeout(()=>t.style.opacity='0',1600);
  };

  NS.copyToClipboard = async function(txt){
    try { await navigator.clipboard.writeText(txt); NS.showToast('Copied','success'); return true; }
    catch(e){
      try {
        const ta = document.createElement('textarea');
        ta.value = txt; ta.style.position='fixed'; ta.style.left='-9999px';
        document.body.appendChild(ta); ta.select(); document.execCommand && document.execCommand('copy'); ta.remove();
        NS.showToast('Copied (fallback)','success'); return true;
      } catch(err){ NS.showToast('Copy failed','error'); return false; }
    }
  };

  NS.escapeHtml = s => (s||'').toString().replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
  NS.xpathLiteral = s => `"${String(s||'').replace(/"/g,'\\"')}"`;
  NS.cssSelectorFor = el => {
    if(!el||!el.tagName) return '';
    if(el.id) return '#'+el.id;
    let sel = el.tagName.toLowerCase();
    try {
      if(el.classList && el.classList.length) sel += '.'+Array.from(el.classList).slice(0,2).map(c=>c.replace(/\s+/g,'')).join('.');
      const nm = el.getAttribute && el.getAttribute('name');
      if(nm) sel += `[name="${nm}"]`;
    } catch(e){}
    return sel;
  };
})();

// -------------------- Phase 3: Preview helpers --------------------
(function(){
  function getPreview(){ return document.getElementById('preview'); }
  function getDoc(){
    const f = getPreview();
    if(f && f.tagName && f.tagName.toLowerCase()==='iframe'){
      try {
        if(f.contentDocument) return f.contentDocument;
        // on some browsers srcdoc not available as contentDocument until load -> fallback to parsed DOM
      } catch(e){}
      if(window._PARSER_DOC) return window._PARSER_DOC;
      return document;
    }
    return window._PARSER_DOC || document;
  }
  NS.getPreviewDocument = getDoc;
})();

// -------------------- Phase 4: Highlight --------------------
(function(){
  function evalXPath(doc, xp){ try { return doc.evaluate(xp, doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue; }catch(e){return null;} }
  NS.tryHighlightByXPath = function(xp){
    if(!xp) return false;
    // try preview doc first
    try {
      const doc = NS.getPreviewDocument();
      const el = evalXPath(doc, xp);
      if(el){
        const prev = el.style.outline;
        el.style.outline='3px solid #7c5cff';
        try { el.scrollIntoView({behavior:'smooth', block:'center'}); } catch(e){}
        setTimeout(()=>{ try{ el.style.outline = prev; }catch(e){} }, 1500);
        return true;
      }
    } catch(e){}
    // fallback: try top document
    try {
      const el2 = evalXPath(document, xp);
      if(el2){ const prev = el2.style.outline; el2.style.outline='3px solid #7c5cff'; setTimeout(()=>el2.style.outline=prev,1500); return true; }
    } catch(e){}
    return false;
  };
})();

// -------------------- Phase 5: Locator generators --------------------
(function(){
  function safeAttr(el,n){ try{return el.getAttribute(n);}catch(e){return null;} }
  function getLabel(el){
    try {
      if(!el) return '';
      const txt = (el.innerText || el.textContent || '').trim();
      if(txt) return txt.slice(0,120);
      const ph = safeAttr(el,'placeholder'); if(ph) return ph;
      const alt = safeAttr(el,'alt'); if(alt) return alt;
      return '';
    } catch(e){ return ''; }
  }

  NS.genBasicXPath = el=>{
    if(!el) return '';
    if(el.id) return `//*[@id=${NS.xpathLiteral(el.id)}]`;
    const tag = el.tagName.toLowerCase();
    const label = getLabel(el);
    if(label) return `//${tag}[contains(normalize-space(.), ${NS.xpathLiteral(label)})]`;
    // short positional fallback
    let cur = el; const parts = []; let depth=0;
    while(cur && cur.nodeType===1 && depth<8){
      const t = cur.tagName.toLowerCase();
      let ix = 1; let sib = cur.previousElementSibling;
      while(sib){ if(sib.tagName === cur.tagName) ix++; sib = sib.previousElementSibling; }
      parts.unshift(ix>1? `${t}[${ix}]` : t);
      cur = cur.parentElement; depth++;
    }
    return '//' + parts.join('/');
  };

  NS.genWildcardXPath = el=>{
    if(!el) return '';
    const label = getLabel(el);
    if(label) return `//*[contains(normalize-space(.), ${NS.xpathLiteral(label)})]`;
    const cls = (safeAttr(el,'class')||'').split(/\s+/).filter(Boolean)[0];
    if(cls) return `//*[contains(concat(' ', normalize-space(@class), ' '), ${NS.xpathLiteral(' '+cls+' ')})]`;
    return NS.genBasicXPath(el);
  };

  NS.genAxesXPath = el=>{
    if(!el) return '';
    const tag = el.tagName.toLowerCase();
    const id = el.id;
    if(id) return `//label[@for=${NS.xpathLiteral(id)}]/following::${tag}[1]`;
    const label = getLabel(el);
    if(label) return `//label[contains(normalize-space(.), ${NS.xpathLiteral(label)})]/following::${tag}[1]`;
    return NS.genBasicXPath(el);
  };

  NS.genFunctionXPath = el=>{
    if(!el) return '';
    const tag = el.tagName.toLowerCase();
    const ph = safeAttr(el,'placeholder'); if(ph) return `//${tag}[contains(@placeholder, ${NS.xpathLiteral(ph)})]`;
    const ti = safeAttr(el,'title'); if(ti) return `//${tag}[contains(@title, ${NS.xpathLiteral(ti)})]`;
    const aria = safeAttr(el,'aria-label'); if(aria) return `//${tag}[@aria-label=${NS.xpathLiteral(aria)}]`;
    return NS.genBasicXPath(el);
  };

  NS.genSalesforceXPath = el=>{
    if(!el) return '';
    const tag = el.tagName.toLowerCase();
    if(safeAttr(el,'data-qa-locator')) return `//${tag}[@data-qa-locator=${NS.xpathLiteral(safeAttr(el,'data-qa-locator'))}]`;
    if(safeAttr(el,'data-id')) return `//${tag}[@data-id=${NS.xpathLiteral(safeAttr(el,'data-id'))}]`;
    return '';
  };

  NS.genPegaXPath = el=>{
    if(!el) return '';
    const tag = el.tagName.toLowerCase();
    if(safeAttr(el,'data-test-id')) return `//${tag}[@data-test-id=${NS.xpathLiteral(safeAttr(el,'data-test-id'))}]`;
    if(safeAttr(el,'data-ctl')) return `//${tag}[@data-ctl=${NS.xpathLiteral(safeAttr(el,'data-ctl'))}]`;
    return '';
  };

  NS.generateLocatorsForElement = function(el){
    if(!el) return null;
    return {
      tag: el.tagName.toLowerCase(),
      text: getLabel(el) || '',
      xpaths:{
        basic: NS.genBasicXPath(el),
        wildcards: NS.genWildcardXPath(el),
        axes: NS.genAxesXPath(el),
        functions: NS.genFunctionXPath(el),
        salesforce: NS.genSalesforceXPath(el),
        pega: NS.genPegaXPath(el)
      },
      css: NS.cssSelectorFor(el)
    };
  };
})();

// -------------------- Phase 6: Extract all locators --------------------
(function(){
  function collect(doc){
    try {
      return Array.from(doc.querySelectorAll('input:not([type=hidden]),button,a,select,textarea,[role=button],[data-qa-locator],[data-test-id]'));
    } catch(e){ return []; }
  }
  NS.extractAllLocators = function(){
    const doc = NS.getPreviewDocument();
    const elems = collect(doc);
    NS.CURRENT_LOCATORS = elems.map(el => NS.generateLocatorsForElement(el)).filter(Boolean);
    // preserve existing custom if any (do not overwrite)
    const activeChip = NS.$('.chip.active')?.dataset?.paneltab || 'basic';
    if(activeChip === 'custom' && NS.CURRENT_CUSTOM){
      NS.showCustomLocators(NS.CURRENT_CUSTOM);
    } else {
      NS.fillLocatorList(activeChip);
    }
    NS.showToast(`Extracted ${NS.CURRENT_LOCATORS.length}`);
    return NS.CURRENT_LOCATORS;
  };
})();

// -------------------- Phase 7: Locator List UI --------------------
(function(){
  function pickVal(loc,p){ return (loc && loc.xpaths && loc.xpaths[p]) || loc.css || ''; }
  NS.fillLocatorList = function(panel='basic'){
    panel = panel || 'basic';
    const box = NS.$('#locList');
    if(!box) return;
    box.innerHTML = '';
    const list = NS.CURRENT_LOCATORS || [];
    if(!list.length){ box.innerHTML = '<div class="small">No locators. Paste/Render to populate.</div>'; return; }
    list.forEach((loc, i)=>{
      const val = pickVal(loc,panel) || '';
      const row = document.createElement('div'); row.className='loc-row';
      const left = document.createElement('div'); left.style.display='flex'; left.style.alignItems='center'; left.style.gap='8px';
      const badge = document.createElement('span'); badge.className='badge'; badge.textContent = loc.tag || 'el';
      const txt = document.createElement('div'); txt.style.minWidth='0'; txt.innerHTML = `<div style="font-weight:700;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;">${NS.escapeHtml(loc.text||'(no text)')}</div><div class="small" style="color:#6b7280">${NS.escapeHtml(loc.css||'')}</div>`;
      left.appendChild(badge); left.appendChild(txt);

      const mid = document.createElement('div'); mid.className='mono'; mid.style.flex='1'; mid.style.whiteSpace='nowrap'; mid.style.overflow='hidden'; mid.style.textOverflow='ellipsis'; mid.textContent = val;
      const act = document.createElement('div'); act.style.display='flex'; act.style.gap='6px';
      const copyBtn = document.createElement('button'); copyBtn.className='btn'; copyBtn.textContent='Copy';
      const hiBtn = document.createElement('button'); hiBtn.className='btn'; hiBtn.textContent='Highlight';
      act.appendChild(copyBtn); act.appendChild(hiBtn);

      row.appendChild(left); row.appendChild(mid); row.appendChild(act);

      // row click: copy + highlight
      row.addEventListener('click', async (e)=>{
        if(e.target && (e.target.tagName === 'BUTTON' || e.target.tagName === 'INPUT')) return;
        const v = mid.textContent || '';
        if(!v) return NS.showToast('No locator','error');
        NS.tryHighlightByXPath(v);
        await NS.copyToClipboard(v);
        NS.showToast('Copied & highlighted');
      });

      copyBtn.addEventListener('click', async (ev)=>{ ev.stopPropagation(); const v = mid.textContent || ''; if(v) await NS.copyToClipboard(v); });
      hiBtn.addEventListener('click', (ev)=>{ ev.stopPropagation(); const v = mid.textContent || ''; if(v) NS.tryHighlightByXPath(v); });

      box.appendChild(row);
    });
  };

  // wire chip clicks
  (function wireChips(){
    const tabs = NS.$('#locatorTabs');
    if(!tabs) return;
    tabs.addEventListener('click', (e)=>{
      const chip = e.target.closest('.chip');
      if(!chip) return;
      // toggle active
      NS.$$('.chip').forEach(c=>c.classList.remove('active'));
      chip.classList.add('active');
      const panel = chip.dataset.paneltab || 'basic';
      if(panel === 'custom'){
        if(NS.CURRENT_CUSTOM) NS.showCustomLocators(NS.CURRENT_CUSTOM);
        else { NS.$('#locList').innerHTML = '<div class="small">Click an element in preview to populate Custom</div>'; }
      } else {
        NS.fillLocatorList(panel);
      }
    });
  })();
})();

// -------------------- Phase 8: Interactive preview click â†’ Custom --------------------
(function(){
  function onPreviewClick(e){
    try {
      e.preventDefault && e.preventDefault();
      e.stopPropagation && e.stopPropagation();
      const el = e.target;
      if(!el) return;
      const loc = NS.generateLocatorsForElement(el);
      if(!loc) return;
      NS.CURRENT_CUSTOM = loc;
      // switch to custom tab visually
      const customChip = NS.$('.chip[data-paneltab="custom"]');
      if(customChip){ NS.$$('.chip').forEach(c=>c.classList.remove('active')); customChip.classList.add('active'); }
      NS.showCustomLocators(loc);
      // append snippet to output
      const out = NS.$('#output');
      if(out){
        const snippet = [
          `// Captured: ${loc.tag} ${loc.text?(' - '+loc.text):''}`,
          `// XPATH (basic): ${loc.xpaths.basic}`,
          `// XPATH (wildcards): ${loc.xpaths.wildcards}`,
          `// CSS: ${loc.css}`
        ].join('\n');
        out.value = (out.value ? out.value + '\n\n' : '') + snippet;
      }
      NS.showToast('Captured element to Custom', 'success');
    } catch(err){ console.warn('preview click fail', err); }
  }

  NS.attachHandlersToPreview = function(){
    try {
      // detach any previous handlers saved by attachPreviewHandler mechanism
      try { NS.detachAllPreviewHandlers && NS.detachAllPreviewHandlers(); } catch(e){}
      const iframe = NS.$('#preview');
      if(iframe && iframe.tagName && iframe.tagName.toLowerCase()==='iframe'){
        // attach after load (safe guarded)
        function attachToDoc(doc){
          if(!doc) return;
          try { doc.addEventListener('click', onPreviewClick, true); NS.attachPreviewHandler && NS.attachPreviewHandler(doc, 'click', onPreviewClick); } catch(e){ console.warn('attachToDoc failed', e); }
        }
        try {
          if(iframe.contentDocument && (iframe.contentDocument.readyState === 'complete' || iframe.contentDocument.readyState === 'interactive')){
            attachToDoc(iframe.contentDocument);
          } else {
            iframe.addEventListener('load', ()=>{ try{ attachToDoc(iframe.contentDocument); }catch(e){} }, {once:true});
          }
        } catch(e){
          // cross-origin -> fallback: parse DOM has no clickable live elements; we still support parsed DOM via _PARSER_DOC
          if(window._PARSER_DOC) try { attachToDoc(window._PARSER_DOC); } catch(e){}
        }
      } else {
        // preview not iframe â€” attach to parsed doc or top
        try { const doc = NS.getPreviewDocument(); doc.addEventListener('click', onPreviewClick, true); NS.attachPreviewHandler && NS.attachPreviewHandler(doc, 'click', onPreviewClick); } catch(e){}
      }
    } catch(e){ console.warn('attachHandlersToPreview error', e); }
  };

  NS.showCustomLocators = function(loc){
    const box = NS.$('#locList');
    if(!box) return;
    box.innerHTML = '';
    const strategies = ['basic','wildcards','axes','functions','salesforce','pega'];
    strategies.forEach(k=>{
      const v = (loc.xpaths && loc.xpaths[k]) || '';
      const row = document.createElement('div'); row.className='loc-row';
      row.innerHTML = `<div style="width:120px;font-weight:700">${NS.escapeHtml(k.toUpperCase())}</div><div class="mono" style="flex:1">${NS.escapeHtml(v||'(none)')}</div><div style="margin-left:8px"><button class="btn">Copy</button> <button class="btn">Highlight</button></div>`;
      const copyBtn = row.querySelector('.btn');
      // copy first button, highlight second (wired simple)
      row.querySelectorAll('.btn')[0].addEventListener('click', async (ev)=>{ ev.stopPropagation(); if(v) await NS.copyToClipboard(v); });
      row.querySelectorAll('.btn')[1].addEventListener('click', (ev)=>{ ev.stopPropagation(); if(v) NS.tryHighlightByXPath(v); });
      row.addEventListener('click', ()=>{ if(v) { NS.tryHighlightByXPath(v); NS.copyToClipboard(v); } });
      box.appendChild(row);
    });
    // CSS row
    const cssRow = document.createElement('div'); cssRow.className='loc-row';
    cssRow.innerHTML = `<div style="width:120px;font-weight:700">CSS</div><div class="mono" style="flex:1">${NS.escapeHtml(loc.css||'(none)')}</div><div style="margin-left:8px"><button class="btn">Copy</button></div>`;
    cssRow.querySelector('.btn').addEventListener('click', async ()=>{ await NS.copyToClipboard(loc.css||''); });
    box.appendChild(cssRow);
  };
})();

// -------------------- Phase 9: Render, Clear, File open, UI wiring --------------------
(function(){
  NS.renderPreview = function(){
    try {
      const txt = (NS.$('#pasteBox') && NS.$('#pasteBox').value) || '';
      NS.CURRENT_HTML = txt;
      const iframe = NS.$('#preview');
      const clean = txt.replace(/<script[\s\S]*?>[\s\S]*?<\/script>/gi,'');
      if(iframe && iframe.tagName && iframe.tagName.toLowerCase()==='iframe'){
        try { iframe.srcdoc = clean; } catch(e){ iframe.setAttribute('srcdoc', clean); }
      }
      try { window._PARSER_DOC = (new DOMParser()).parseFromString(txt, 'text/html'); } catch(e){}
      setTimeout(()=>{ try { NS.attachHandlersToPreview(); NS.extractAllLocators(); } catch(e){} }, 300);
      NS.showToast('Preview rendered','success');
    } catch(e){ console.error(e); NS.showToast('Render failed','error'); }
  };

  NS.clearAll = function(){
    try {
      const paste = NS.$('#pasteBox'); if(paste) paste.value = '';
      const iframe = NS.$('#preview'); if(iframe && iframe.tagName && iframe.tagName.toLowerCase()==='iframe') iframe.srcdoc = '<body><h3>Cleared</h3></body>';
      NS.CURRENT_HTML = ''; NS.CURRENT_DOC = null; NS.CURRENT_LOCATORS = []; NS.CURRENT_CUSTOM = null;
      NS.$('#locList') && (NS.$('#locList').innerHTML = '');
      NS.$('#output') && (NS.$('#output').value = '');
      NS.showToast('Cleared','info');
    } catch(e){ console.warn(e); }
  };

  // wire buttons
  NS.$('#btnRender')?.addEventListener('click', NS.renderPreview);
  NS.$('#btnClear')?.addEventListener('click', NS.clearAll);

  // file open wiring
  NS.$('#btnOpenFile')?.addEventListener('click', ()=> NS.$('#hiddenFile')?.click());
  NS.$('#hiddenFile')?.addEventListener('change', (ev)=>{
    const f = ev.target.files && ev.target.files[0]; if(!f) return;
    const reader = new FileReader();
    reader.onload = e => { NS.$('#pasteBox') && (NS.$('#pasteBox').value = e.target.result); NS.renderPreview(); };
    reader.readAsText(f);
  });

  // dropzone support
  const dz = NS.$('#dropZone');
  if(dz){
    dz.addEventListener('dragover', (e)=>{ e.preventDefault(); dz.style.opacity = '0.8'; });
    dz.addEventListener('dragleave', (e)=>{ dz.style.opacity = '1'; });
    dz.addEventListener('drop', (e)=>{ e.preventDefault(); dz.style.opacity = '1'; const f = (e.dataTransfer && e.dataTransfer.files && e.dataTransfer.files[0]); if(f){ const r = new FileReader(); r.onload = ev => { NS.$('#pasteBox').value = ev.target.result; NS.renderPreview(); }; r.readAsText(f); } });
  }

  // mode chips (POM/API) â€” match your left card IDs
  const modePOM = NS.$('#modePOM'), modeAPI = NS.$('#modeAPI');
  if(modePOM && modeAPI){
    modePOM.addEventListener('click', ()=>{ modePOM.classList.add('active'); modeAPI.classList.remove('active'); NS.$('#pomLeftCard')?.classList.remove('hidden'); NS.$('#apiLeftCard')?.classList.add('hidden'); });
    modeAPI.addEventListener('click', ()=>{ modeAPI.classList.add('active'); modePOM.classList.remove('active'); NS.$('#apiLeftCard')?.classList.remove('hidden'); NS.$('#pomLeftCard')?.classList.add('hidden'); });
  }

  // wire .sw toggles (framework/language/runner)
  (function wireSwGroups(){
    const sws = document.querySelectorAll('.sw');
    sws.forEach(sw=>{
      sw.addEventListener('click', ()=>{
        const data = Array.from(sw.attributes).find(a=>/^data-/.test(a.name));
        if(!data) return;
        const attrName = data.name;
        document.querySelectorAll(`.sw[${attrName}]`).forEach(g=>g.classList.remove('active'));
        sw.classList.add('active');
      });
    });
  })();

  // ensure Download Output button
  (function ensureDownloadOutputButton(){
    const out = NS.$('#output');
    if(!out) return;
    if(NS.$('#btnDownloadOutput')) return;
    const btn = document.createElement('button'); btn.id='btnDownloadOutput'; btn.className='btn'; btn.textContent='Download Output';
    out.parentNode.insertBefore(btn, out.nextSibling);
    btn.addEventListener('click', ()=>{
      const txt = out.value || '';
      if(!txt) return NS.showToast('Nothing to download','error');
      const blob = new Blob([txt], {type:'text/plain'}); const a = document.createElement('a'); a.href = URL.createObjectURL(blob); a.download = 'adhy-output.txt'; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(a.href);
      NS.showToast('Download started','success');
    });
  })();

  // POM preview generation (preview-only)
  NS.$('#btnGenPOM')?.addEventListener('click', ()=>{
    try {
      const fw = document.querySelector('.sw[data-fw].active')?.dataset?.fw || 'selenium';
      const lang = document.querySelector('.sw[data-lang].active')?.dataset?.lang || 'java';
      // choose source locators: custom (if present) else all current
      const locs = NS.CURRENT_CUSTOM ? [NS.CURRENT_CUSTOM] : (NS.CURRENT_LOCATORS || []);
      const normalized = locs.map((l,i)=> {
        const name = (l.text || l.tag || `elem${i+1}`).toString().replace(/\s+/g,'_').replace(/[^A-Za-z0-9_]/g,'').slice(0,40);
        const xpath = (l.xpaths && (l.xpaths.basic || l.xpaths.wildcards)) || l.css || '';
        return { name: name || `elem${i+1}`, xpath };
      });
      // build simple preview text
      let outTxt = `// Framework: ${fw}  Language: ${lang}\n\n`;
      normalized.forEach(n=>{
        outTxt += `@FindBy(xpath = "${n.xpath.replace(/"/g,'\\"')}")\nprivate WebElement ${n.name};\n\n`;
      });
      NS.$('#output') && (NS.$('#output').value = outTxt);
      NS.showToast('POM preview generated','success');
    } catch(e){ console.error(e); NS.showToast('POM generate failed','error'); }
  });

  // Zip download optional: btnZipAll uses JSZip if present (kept explicit)
  NS.$('#btnZipAll')?.addEventListener('click', async ()=>{
    if(!window.JSZip){ NS.showToast('JSZip required','error'); return; }
    try {
      const fw = document.querySelector('.sw[data-fw].active')?.dataset?.fw || 'selenium';
      const lang = document.querySelector('.sw[data-lang].active')?.dataset?.lang || 'java';
      const locs = NS.CURRENT_CUSTOM ? [NS.CURRENT_CUSTOM] : (NS.CURRENT_LOCATORS || []);
      const normalized = locs.map((l,i)=> {
        const name = (l.text || l.tag || `elem${i+1}`).toString().replace(/\s+/g,'_').replace(/[^A-Za-z0-9_]/g,'').slice(0,40);
        const xpath = (l.xpaths && (l.xpaths.basic || l.xpaths.wildcards)) || l.css || '';
        return { name: name || `elem${i+1}`, xpath };
      });
      const jszip = new JSZip();
      const content = normalized.map(n=>`${n.name}: ${n.xpath}`).join('\n');
      jszip.file('locators.txt', content);
      const blob = await jszip.generateAsync({type:'blob'});
      const a = document.createElement('a'); a.href = URL.createObjectURL(blob); a.download = `adhy-artifacts-${fw}-${lang}.zip`; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(a.href);
      NS.showToast('ZIP downloaded','success');
    } catch(e){ console.error(e); NS.showToast('ZIP failed','error'); }
  });

  // initial attach after load
  setTimeout(()=>{ try { NS.attachHandlersToPreview && NS.attachHandlersToPreview(); } catch(e){} }, 600);
})();

// -------------------- Phase 10: Startup --------------------
(function(){
  try { NS.fillLocatorList && NS.fillLocatorList('basic'); } catch(e){}
  console.info('AdhyPatch loaded. Version:', NS.version);
})();
</script>
















try { await navigator.clipboard.writeText(txt); NS.showToast('Copied','success'); return true; }
    catch(e){ console.warn(e); return false; }
  };

  NS.escapeHtml = s => (s||'').replace(/&/g,'&amp;').replace(/</g,'&lt;');
  NS.xpathLiteral = s => `"${String(s||'').replace(/"/g,'\\"')}"`;
  NS.cssSelectorFor = el => {
    if(!el||!el.tagName) return '';
    if(el.id) return '#'+el.id;
    let sel = el.tagName.toLowerCase();
    if(el.classList && el.classList.length) sel += '.'+Array.from(el.classList).slice(0,2).join('.');
    return sel;
  };
})();

// -------------------- Phase 3: Preview helpers --------------------
(function(){
  function getPreview(){ return document.getElementById('preview'); }
  function getDoc(){
    const f = getPreview();
    if(f && f.contentDocument) return f.contentDocument;
    return window._PARSER_DOC || document;
  }
  NS.getPreviewDocument = getDoc;
})();

// -------------------- Phase 4: Highlight --------------------
(function(){
  function evalXPath(doc, xp){ try { return doc.evaluate(xp, doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue; }catch(e){return null;} }
  NS.tryHighlightByXPath = function(xp){
    const doc = NS.getPreviewDocument();
    const el = evalXPath(doc, xp);
    if(!el) return false;
    const old = el.style.outline;
    el.style.outline='3px solid #7c5cff'; el.scrollIntoView({behavior:'smooth',block:'center'});
    setTimeout(()=>el.style.outline=old,1500);
    return true;
  };
})();

// -------------------- Phase 5: Locator generators --------------------
(function(){
  function safeAttr(el,n){ try{return el.getAttribute(n);}catch(e){return null;} }
  function getLabel(el){ return (el.innerText||el.textContent||'').trim().slice(0,80); }

  NS.genBasicXPath = el=>{
    if(!el) return '';
    if(el.id) return `//*[@id=${NS.xpathLiteral(el.id)}]`;
    const tag = el.tagName.toLowerCase();
    return `//${tag}[contains(normalize-space(.),${NS.xpathLiteral(getLabel(el))})]`;
  };
  NS.genWildcardXPath = el=>`//*[contains(normalize-space(.),${NS.xpathLiteral(getLabel(el))})]`;
  NS.genAxesXPath = el=>`//label[contains(.,${NS.xpathLiteral(getLabel(el))})]/following::${el.tagName.toLowerCase()}[1]`;
  NS.genFunctionXPath = el=>`//${el.tagName.toLowerCase()}[starts-with(@placeholder,'${(safeAttr(el,'placeholder')||'').split(' ')[0]}')]`;
  NS.genSalesforceXPath = el=>safeAttr(el,'data-id')?`//${el.tagName.toLowerCase()}[@data-id=${NS.xpathLiteral(safeAttr(el,'data-id'))}]`:'';
  NS.genPegaXPath = el=>safeAttr(el,'data-ctl')?`//${el.tagName.toLowerCase()}[@data-ctl=${NS.xpathLiteral(safeAttr(el,'data-ctl'))}]`:'';

  NS.generateLocatorsForElement = el=>{
    return {
      tag: el.tagName.toLowerCase(),
      text: getLabel(el),
      xpaths:{
        basic:NS.genBasicXPath(el),
        wildcards:NS.genWildcardXPath(el),
        axes:NS.genAxesXPath(el),
        functions:NS.genFunctionXPath(el),
        salesforce:NS.genSalesforceXPath(el),
        pega:NS.genPegaXPath(el)
      },
      css:NS.cssSelectorFor(el)
    };
  };
})();

// -------------------- Phase 6: Extract all locators --------------------
(function(){
  function collect(doc){
    return Array.from(doc.querySelectorAll('input,button,select,textarea,a,[role=button]'));
  }
  NS.extractAllLocators = function(){
    const doc = NS.getPreviewDocument();
    NS.CURRENT_LOCATORS = collect(doc).map(NS.generateLocatorsForElement);
    NS.fillLocatorList('basic');
    NS.showToast(`Extracted ${NS.CURRENT_LOCATORS.length}`);
  };
})();

// -------------------- Phase 7: Locator List UI --------------------
(function(){
  function pickVal(loc,p){ return loc.xpaths[p]||loc.css||''; }
  NS.fillLocatorList = function(panel='basic'){
    const box=NS.$('#locList'); box.innerHTML='';
    (NS.CURRENT_LOCATORS||[]).forEach(loc=>{
      const val=pickVal(loc,panel);
      const row=document.createElement('div'); row.className='loc-row';
      row.innerHTML=`<div class="mono">${NS.escapeHtml(val)}</div>`;
      row.addEventListener('click',()=>{NS.copyToClipboard(val);NS.tryHighlightByXPath(val);});
      box.appendChild(row);
    });
  };
})();

// -------------------- Phase 8: Interactive click â†’ Custom --------------------
(function(){
  function onClick(e){
    e.preventDefault(); e.stopPropagation();
    const el=e.target; if(!el) return;
    NS.CURRENT_CUSTOM=NS.generateLocatorsForElement(el);
    NS.showCustomLocators(NS.CURRENT_CUSTOM);
  }
  NS.attachHandlersToPreview=function(){
    const doc=NS.getPreviewDocument();
    doc.addEventListener('click',onClick,true);
  };

  NS.showCustomLocators=function(loc){
    const box=NS.$('#locList'); box.innerHTML='';
    const strategies=['basic','wildcards','axes','functions','salesforce','pega'];
    strategies.forEach(k=>{
      const v=loc.xpaths[k];
      const row=document.createElement('div'); row.className='loc-row';
      row.innerHTML=`<b>${k}</b> <span class="mono">${NS.escapeHtml(v)}</span>`;
      row.addEventListener('click',()=>{NS.copyToClipboard(v);NS.tryHighlightByXPath(v);});
      box.appendChild(row);
    });
    const cssRow=document.createElement('div'); cssRow.className='loc-row';
    cssRow.innerHTML=`<b>CSS</b> <span class="mono">${loc.css}</span>`;
    box.appendChild(cssRow);
  };
})();

// -------------------- Phase 9: Render & Clear --------------------
(function(){
  NS.renderPreview=function(){
    const txt=NS.$('#pasteBox').value||'<body><h3>No input</h3>';
    NS.CURRENT_HTML=txt;
    const f=NS.$('#preview'); f.srcdoc=txt.replace(/<script[\s\S]*?<\/script>/gi,'');
    setTimeout(()=>{NS.attachHandlersToPreview();NS.extractAllLocators();},300);
  };
  NS.clearAll=function(){
    NS.$('#pasteBox').value=''; NS.$('#preview').srcdoc='<body><h3>Cleared</h3>';
    NS.CURRENT_LOCATORS=[]; NS.$('#locList').innerHTML=''; NS.$('#output').value='';
  };
  NS.$('#btnRender')?.addEventListener('click',NS
